{
  "groups": [
    {
      "name": "camel.component.sjms2",
      "type": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.sjms2.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.sjms2.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.sjms2.connection-factory",
      "type": "javax.jms.ConnectionFactory",
      "description": "The connection factory to be use. A connection factory must be configured either on the component or endpoint. The option is a javax.jms.ConnectionFactory type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.sjms2.destination-creation-strategy",
      "type": "org.apache.camel.component.sjms.jms.DestinationCreationStrategy",
      "description": "To use a custom DestinationCreationStrategy. The option is a org.apache.camel.component.sjms.jms.DestinationCreationStrategy type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the sjms2 component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.header-filter-strategy",
      "type": "org.apache.camel.spi.HeaderFilterStrategy",
      "description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message. The option is a org.apache.camel.spi.HeaderFilterStrategy type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.jms-key-format-strategy",
      "type": "org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy",
      "description": "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides one implementation out of the box: default. The default strategy will safely marshal dots and hyphens (. and -). Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the # notation. The option is a org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.sjms2.message-created-strategy",
      "type": "org.apache.camel.component.sjms.jms.MessageCreatedStrategy",
      "description": "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message. The option is a org.apache.camel.component.sjms.jms.MessageCreatedStrategy type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration"
    },
    {
      "name": "camel.component.sjms2.recovery-interval",
      "type": "java.lang.Long",
      "description": "Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds. The default is 5000 ms, that is, 5 seconds. The option is a long type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.sjms2.reply-to-on-timeout-max-concurrent-consumers",
      "type": "java.lang.Integer",
      "description": "Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request\/reply over JMS.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "defaultValue": 1
    },
    {
      "name": "camel.component.sjms2.request-timeout-checker-interval",
      "type": "java.lang.Long",
      "description": "Configures how often Camel should check for timed out Exchanges when doing request\/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs, then you can lower this interval, to check more frequently. The timeout is determined by the option requestTimeout. The option is a long type.",
      "sourceType": "org.apache.camel.component.sjms2.springboot.Sjms2ComponentConfiguration",
      "defaultValue": 1000
    }
  ],
  "hints": []
}