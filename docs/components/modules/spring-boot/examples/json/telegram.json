{
  "groups": [
    {
      "name": "camel.component.telegram",
      "type": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration"
    },
    {
      "name": "camel.component.telegram.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.telegram.authorization-token",
      "type": "java.lang.String",
      "description": "The default Telegram authorization token to be used when the information is not provided in the endpoints.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration"
    },
    {
      "name": "camel.component.telegram.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.telegram.base-uri",
      "type": "java.lang.String",
      "description": "Can be used to set an alternative base URI, e.g. when you want to test the component against a mock Telegram API",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration",
      "defaultValue": "https:\/\/api.telegram.org"
    },
    {
      "name": "camel.component.telegram.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.telegram.client",
      "type": "org.asynchttpclient.AsyncHttpClient",
      "description": "To use a custom AsyncHttpClient. The option is a org.asynchttpclient.AsyncHttpClient type.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration"
    },
    {
      "name": "camel.component.telegram.client-config",
      "type": "org.asynchttpclient.AsyncHttpClientConfig",
      "description": "To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance. The option is a org.asynchttpclient.AsyncHttpClientConfig type.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration"
    },
    {
      "name": "camel.component.telegram.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.telegram.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the telegram component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration"
    },
    {
      "name": "camel.component.telegram.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.telegram.springboot.TelegramComponentConfiguration",
      "defaultValue": false
    }
  ],
  "hints": []
}