{
  "groups": [
    {
      "name": "camel.component.aws-ddb",
      "type": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.aws-ddbstream",
      "type": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.aws-ddb.access-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Access Key",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.amazon-d-d-b-client",
      "type": "com.amazonaws.services.dynamodbv2.AmazonDynamoDB",
      "description": "To use the AmazonDynamoDB as the client. The option is a com.amazonaws.services.dynamodbv2.AmazonDynamoDB type.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.auto-discover-client",
      "type": "java.lang.Boolean",
      "description": "Setting the autoDiscoverClient mechanism, if true, the component will look for a client instance in the registry automatically otherwise it will skip that checking.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-ddb.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-ddb.configuration",
      "type": "org.apache.camel.component.aws.ddb.DdbConfiguration",
      "description": "The component configuration. The option is a org.apache.camel.component.aws.ddb.DdbConfiguration type.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.consistent-read",
      "type": "java.lang.Boolean",
      "description": "Determines whether or not strong consistency should be enforced when data is read.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-ddb.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.aws-ddb.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the aws-ddb component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.key-attribute-name",
      "type": "java.lang.String",
      "description": "Attribute name when creating table",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.key-attribute-type",
      "type": "java.lang.String",
      "description": "Attribute type when creating table",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-ddb.operation",
      "type": "org.apache.camel.component.aws.ddb.DdbOperations",
      "description": "What operation to perform",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.proxy-host",
      "type": "java.lang.String",
      "description": "To define a proxy host when instantiating the DDB client",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.proxy-port",
      "type": "java.lang.Integer",
      "description": "To define a proxy port when instantiating the DDB client. When using this parameter, the configuration will expect the capitalized name of the region (for example AP_EAST_1) You'll need to use the name Regions.EU_WEST_1.name()",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.proxy-protocol",
      "type": "com.amazonaws.Protocol",
      "description": "To define a proxy protocol when instantiating the DDB client",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.read-capacity",
      "type": "java.lang.Long",
      "description": "The provisioned throughput to reserve for reading resources from your table",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.region",
      "type": "java.lang.String",
      "description": "The region in which DDB client needs to work",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.secret-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Secret Key",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddb.write-capacity",
      "type": "java.lang.Long",
      "description": "The provisioned throughput to reserved for writing resources to your table",
      "sourceType": "org.apache.camel.component.aws.ddb.springboot.DdbComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.access-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Access Key",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.amazon-dynamo-db-streams-client",
      "type": "com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams",
      "description": "Amazon DynamoDB client to use for all requests for this endpoint. The option is a com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams type.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.auto-discover-client",
      "type": "java.lang.Boolean",
      "description": "Setting the autoDiscoverClient mechanism, if true, the component will look for a client instance in the registry automatically otherwise it will skip that checking",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-ddbstream.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-ddbstream.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-ddbstream.configuration",
      "type": "org.apache.camel.component.aws.ddbstream.DdbStreamConfiguration",
      "description": "The component configuration. The option is a org.apache.camel.component.aws.ddbstream.DdbStreamConfiguration type.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.aws-ddbstream.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the aws-ddbstream component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.iterator-type",
      "type": "com.amazonaws.services.dynamodbv2.model.ShardIteratorType",
      "description": "Defines where in the DynaboDB stream to start getting records. Note that using TRIM_HORIZON can cause a significant delay before the stream has caught up to real-time. if {AT,AFTER}_SEQUENCE_NUMBER are used, then a sequenceNumberProvider MUST be supplied.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.max-results-per-request",
      "type": "java.lang.Integer",
      "description": "Maximum number of records that will be fetched in each poll",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.proxy-host",
      "type": "java.lang.String",
      "description": "To define a proxy host when instantiating the DDBStreams client",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.proxy-port",
      "type": "java.lang.Integer",
      "description": "To define a proxy port when instantiating the DDBStreams client",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.proxy-protocol",
      "type": "com.amazonaws.Protocol",
      "description": "To define a proxy protocol when instantiating the DDBStreams client",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.region",
      "type": "java.lang.String",
      "description": "The region in which DDBStreams client needs to work",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.secret-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Secret Key",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ddbstream.sequence-number-provider",
      "type": "org.apache.camel.component.aws.ddbstream.SequenceNumberProvider",
      "description": "Provider for the sequence number when using one of the two ShardIteratorType.{AT,AFTER}_SEQUENCE_NUMBER iterator types. Can be a registry reference or a literal sequence number. The option is a org.apache.camel.component.aws.ddbstream.SequenceNumberProvider type.",
      "sourceType": "org.apache.camel.component.aws.ddbstream.springboot.DdbStreamComponentConfiguration"
    }
  ],
  "hints": []
}