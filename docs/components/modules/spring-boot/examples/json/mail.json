{
  "groups": [
    {
      "name": "camel.component.mail",
      "type": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.dataformat.mime-multipart",
      "type": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.mime-multipart.customizer",
      "type": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.mail.additional-java-mail-properties",
      "type": "java.util.Properties",
      "description": "Sets additional java mail properties, that will append\/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is. The option is a java.util.Properties type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.alternative-body-header",
      "type": "java.lang.String",
      "description": "Specifies the key to an IN message header that contains an alternative email body. For example, if you send emails in text\/html format and want to provide an alternative mail body for non-HTML email clients, set the alternative mail body with this key as a header.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": "CamelMailAlternativeBody"
    },
    {
      "name": "camel.component.mail.attachments-content-transfer-encoding-resolver",
      "type": "org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver",
      "description": "To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments. The option is a org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.authenticator",
      "type": "org.apache.camel.component.mail.MailAuthenticator",
      "description": "The authenticator for login. If set then the password and username are ignored. Can be used for tokens which can expire and therefore must be read dynamically. The option is a org.apache.camel.component.mail.MailAuthenticator type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.mail.bcc",
      "type": "java.lang.String",
      "description": "Sets the BCC email address. Separate multiple email addresses with comma.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.cc",
      "type": "java.lang.String",
      "description": "Sets the CC email address. Separate multiple email addresses with comma.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.close-folder",
      "type": "java.lang.Boolean",
      "description": "Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well, then the consumer keep the folder open between polls.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.mail.configuration",
      "type": "org.apache.camel.component.mail.MailConfiguration",
      "description": "Sets the Mail configuration. The option is a org.apache.camel.component.mail.MailConfiguration type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.connection-timeout",
      "type": "java.lang.Integer",
      "description": "The connection timeout in milliseconds.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": 30000
    },
    {
      "name": "camel.component.mail.content-type",
      "type": "java.lang.String",
      "description": "The mail message content type. Use text\/html for HTML mails.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": "text\/plain"
    },
    {
      "name": "camel.component.mail.content-type-resolver",
      "type": "org.apache.camel.component.mail.ContentTypeResolver",
      "description": "Resolver to determine Content-Type for file attachments. The option is a org.apache.camel.component.mail.ContentTypeResolver type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.copy-to",
      "type": "java.lang.String",
      "description": "After processing a mail message, it can be copied to a mail folder with the given name. You can override this configuration value, with a header with the key copyTo, allowing you to copy messages to folder names configured at runtime.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.mail.debug-mode",
      "type": "java.lang.Boolean",
      "description": "Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.decode-filename",
      "type": "java.lang.Boolean",
      "description": "If set to true, the MimeUtility.decodeText method will be used to decode the filename. This is similar to setting JVM system property mail.mime.encodefilename.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.delete",
      "type": "java.lang.Boolean",
      "description": "Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message. If false, the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a header with the key delete to determine if the mail should be deleted or not.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.disconnect",
      "type": "java.lang.Boolean",
      "description": "Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the mail component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.fetch-size",
      "type": "java.lang.Integer",
      "description": "Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server, if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed. Setting the value to 0 is a special corner case, where Camel will not consume any messages at all.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": -1
    },
    {
      "name": "camel.component.mail.folder-name",
      "type": "java.lang.String",
      "description": "The folder to poll.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": "INBOX"
    },
    {
      "name": "camel.component.mail.from",
      "type": "java.lang.String",
      "description": "The from email address",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": "camel@localhost"
    },
    {
      "name": "camel.component.mail.handle-failed-message",
      "type": "java.lang.Boolean",
      "description": "If the mail consumer cannot retrieve a given mail message, then this option allows to handle the caused exception by the consumer's error handler. By enable the bridge error handler on the consumer, then the Camel routing error handler can handle the exception instead. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.header-filter-strategy",
      "type": "org.apache.camel.spi.HeaderFilterStrategy",
      "description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message. The option is a org.apache.camel.spi.HeaderFilterStrategy type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.ignore-unsupported-charset",
      "type": "java.lang.Boolean",
      "description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.ignore-uri-scheme",
      "type": "java.lang.Boolean",
      "description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.java-mail-properties",
      "type": "java.util.Properties",
      "description": "Sets the java mail options. Will clear any default properties and only use the properties provided for this method. The option is a java.util.Properties type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.java-mail-sender",
      "type": "org.apache.camel.component.mail.JavaMailSender",
      "description": "To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails. The option is a org.apache.camel.component.mail.JavaMailSender type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.map-mail-message",
      "type": "java.lang.Boolean",
      "description": "Specifies whether Camel should map the received mail message to Camel body\/headers\/attachments. If set to true, the body of the mail message is mapped to the body of the Camel IN message, the mail headers are mapped to IN headers, and the attachments to Camel IN attachment message. If this option is set to false then the IN message contains a raw javax.mail.Message. You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class).",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.mail.mime-decode-headers",
      "type": "java.lang.Boolean",
      "description": "This option enables transparent MIME decoding and unfolding for mail headers.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.move-to",
      "type": "java.lang.String",
      "description": "After processing a mail message, it can be moved to a mail folder with the given name. You can override this configuration value, with a header with the key moveTo, allowing you to move messages to folder names configured at runtime.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.password",
      "type": "java.lang.String",
      "description": "The password for login. See also setAuthenticator(MailAuthenticator).",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.peek",
      "type": "java.lang.Boolean",
      "description": "Will mark the javax.mail.Message as peeked before processing the mail message. This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on the mail server, which allows us to rollback the mail message if there is an error processing in Camel.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.mail.reply-to",
      "type": "java.lang.String",
      "description": "The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.session",
      "type": "javax.mail.Session",
      "description": "Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource, such as a JavaEE container. When using a custom mail session, then the hostname and port from the mail session will be used (if configured on the session). The option is a javax.mail.Session type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.skip-failed-message",
      "type": "java.lang.Boolean",
      "description": "If the mail consumer cannot retrieve a given mail message, then this option allows to skip the message and move on to retrieve the next mail message. The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.ssl-context-parameters",
      "type": "org.apache.camel.support.jsse.SSLContextParameters",
      "description": "To configure security using SSLContextParameters. The option is a org.apache.camel.support.jsse.SSLContextParameters type.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.subject",
      "type": "java.lang.String",
      "description": "The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.to",
      "type": "java.lang.String",
      "description": "Sets the To email address. Separate multiple email addresses with comma.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.component.mail.unseen",
      "type": "java.lang.Boolean",
      "description": "Whether to limit by unseen mails only.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.mail.use-global-ssl-context-parameters",
      "type": "java.lang.Boolean",
      "description": "Enable usage of global SSL context parameters.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.use-inline-attachments",
      "type": "java.lang.Boolean",
      "description": "Whether to use disposition inline or attachment.",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.mail.username",
      "type": "java.lang.String",
      "description": "The username for login. See also setAuthenticator(MailAuthenticator).",
      "sourceType": "org.apache.camel.component.mail.springboot.MailComponentConfiguration"
    },
    {
      "name": "camel.dataformat.mime-multipart.binary-content",
      "type": "java.lang.Boolean",
      "description": "Defines whether the content of binary parts in the MIME multipart is binary (true) or Base-64 encoded (false) Default is false.",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.mime-multipart.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.dataformat.mime-multipart.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the mime-multipart data format. This is enabled by default.",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.mime-multipart.headers-inline",
      "type": "java.lang.Boolean",
      "description": "Defines whether the MIME-Multipart headers are part of the message body (true) or are set as Camel headers (false). Default is false.",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.mime-multipart.include-headers",
      "type": "java.lang.String",
      "description": "A regex that defines which Camel headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true. Default is to include no headers",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.mime-multipart.multipart-sub-type",
      "type": "java.lang.String",
      "description": "Specify the subtype of the MIME Multipart. Default is mixed.",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration",
      "defaultValue": "mixed"
    },
    {
      "name": "camel.dataformat.mime-multipart.multipart-without-attachment",
      "type": "java.lang.Boolean",
      "description": "Defines whether a message without attachment is also marshaled into a MIME Multipart (with only one body part). Default is false.",
      "sourceType": "org.apache.camel.dataformat.mime.multipart.springboot.MimeMultipartDataFormatConfiguration",
      "defaultValue": false
    }
  ],
  "hints": []
}