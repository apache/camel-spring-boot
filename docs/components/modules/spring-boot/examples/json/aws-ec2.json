{
  "groups": [
    {
      "name": "camel.component.aws-ec2",
      "type": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.aws-ec2.access-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Access Key",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.amazon-ec2-client",
      "type": "com.amazonaws.services.ec2.AmazonEC2",
      "description": "To use a existing configured AmazonEC2Client as client. The option is a com.amazonaws.services.ec2.AmazonEC2 type.",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.auto-discover-client",
      "type": "java.lang.Boolean",
      "description": "Setting the autoDiscoverClient mechanism, if true, the component will look for a client instance in the registry automatically otherwise it will skip that checking.",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-ec2.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-ec2.configuration",
      "type": "org.apache.camel.component.aws.ec2.EC2Configuration",
      "description": "The component configuration. The option is a org.apache.camel.component.aws.ec2.EC2Configuration type.",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.aws-ec2.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the aws-ec2 component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-ec2.operation",
      "type": "org.apache.camel.component.aws.ec2.EC2Operations",
      "description": "The operation to perform. It can be createAndRunInstances, startInstances, stopInstances, terminateInstances, describeInstances, describeInstancesStatus, rebootInstances, monitorInstances, unmonitorInstances, createTags or deleteTags",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.proxy-host",
      "type": "java.lang.String",
      "description": "To define a proxy host when instantiating the EC2 client",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.proxy-port",
      "type": "java.lang.Integer",
      "description": "To define a proxy port when instantiating the EC2 client",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.proxy-protocol",
      "type": "com.amazonaws.Protocol",
      "description": "To define a proxy protocol when instantiating the EC2 client",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.region",
      "type": "java.lang.String",
      "description": "The region in which ECS client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-ec2.secret-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Secret Key",
      "sourceType": "org.apache.camel.component.aws.ec2.springboot.EC2ComponentConfiguration"
    }
  ],
  "hints": []
}