{
  "groups": [
    {
      "name": "camel.cloud.consul.service-discovery",
      "type": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.dns.service-discovery",
      "type": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties",
      "sourceType": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.etcd.service-discovery",
      "type": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery",
      "type": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer",
      "type": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.hystrix",
      "type": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties"
    },
    {
      "name": "camel.language.constant",
      "type": "org.apache.camel.language.constant.springboot.ConstantLanguageConfiguration",
      "sourceType": "org.apache.camel.language.constant.springboot.ConstantLanguageConfiguration"
    },
    {
      "name": "camel.language.constant.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.constant.springboot.ConstantLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.csimple",
      "type": "org.apache.camel.language.csimple.springboot.CSimpleLanguageConfiguration",
      "sourceType": "org.apache.camel.language.csimple.springboot.CSimpleLanguageConfiguration"
    },
    {
      "name": "camel.language.csimple.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.csimple.springboot.CSimpleLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.exchange-property",
      "type": "org.apache.camel.language.property.springboot.ExchangePropertyLanguageConfiguration",
      "sourceType": "org.apache.camel.language.property.springboot.ExchangePropertyLanguageConfiguration"
    },
    {
      "name": "camel.language.exchange-property.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.property.springboot.ExchangePropertyLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.file",
      "type": "org.apache.camel.language.simple.springboot.FileLanguageConfiguration",
      "sourceType": "org.apache.camel.language.simple.springboot.FileLanguageConfiguration"
    },
    {
      "name": "camel.language.file.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.simple.springboot.FileLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.header",
      "type": "org.apache.camel.language.header.springboot.HeaderLanguageConfiguration",
      "sourceType": "org.apache.camel.language.header.springboot.HeaderLanguageConfiguration"
    },
    {
      "name": "camel.language.header.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.header.springboot.HeaderLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.ref",
      "type": "org.apache.camel.language.ref.springboot.RefLanguageConfiguration",
      "sourceType": "org.apache.camel.language.ref.springboot.RefLanguageConfiguration"
    },
    {
      "name": "camel.language.ref.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.ref.springboot.RefLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.simple",
      "type": "org.apache.camel.language.simple.springboot.SimpleLanguageConfiguration",
      "sourceType": "org.apache.camel.language.simple.springboot.SimpleLanguageConfiguration"
    },
    {
      "name": "camel.language.simple.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.simple.springboot.SimpleLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.language.tokenize",
      "type": "org.apache.camel.language.tokenizer.springboot.TokenizeLanguageConfiguration",
      "sourceType": "org.apache.camel.language.tokenizer.springboot.TokenizeLanguageConfiguration"
    },
    {
      "name": "camel.language.tokenize.customizer",
      "type": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.language.tokenizer.springboot.TokenizeLanguageConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.resilience4j",
      "type": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest",
      "type": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    }
  ],
  "properties": [
    {
      "name": "camel.cloud.consul.service-discovery.acl-token",
      "type": "java.lang.String",
      "description": "Sets the ACL token to be used with Consul",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.block-seconds",
      "type": "java.lang.Integer",
      "description": "The seconds to wait for a watch event, default 10 seconds",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.cloud.consul.service-discovery.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.connect-timeout-millis",
      "type": "java.lang.Long",
      "description": "Connect timeout for OkHttpClient",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.datacenter",
      "type": "java.lang.String",
      "description": "The data center",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": true
    },
    {
      "name": "camel.cloud.consul.service-discovery.password",
      "type": "java.lang.String",
      "description": "Sets the password to be used for basic authentication",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using ribbon, then the client properties are define in com.netflix.client.config.CommonClientConfigKey.",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.read-timeout-millis",
      "type": "java.lang.Long",
      "description": "Read timeout for OkHttpClient",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.url",
      "type": "java.lang.String",
      "description": "The Consul agent URL",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.user-name",
      "type": "java.lang.String",
      "description": "Sets the username to be used for basic authentication",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.consul.service-discovery.write-timeout-millis",
      "type": "java.lang.Long",
      "description": "Write timeout for OkHttpClient",
      "sourceType": "org.apache.camel.model.cloud.springboot.ConsulServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.dns.service-discovery.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.dns.service-discovery.domain",
      "type": "java.lang.String",
      "description": "The domain name;",
      "sourceType": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.dns.service-discovery.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": true
    },
    {
      "name": "camel.cloud.dns.service-discovery.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using ribbon, then the client properties are define in com.netflix.client.config.CommonClientConfigKey.",
      "sourceType": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.dns.service-discovery.proto",
      "type": "java.lang.String",
      "description": "The transport protocol of the desired service.",
      "sourceType": "org.apache.camel.model.cloud.springboot.DnsServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": "_tcp"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": true
    },
    {
      "name": "camel.cloud.etcd.service-discovery.password",
      "type": "java.lang.String",
      "description": "The password to use for basic authentication.",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using ribbon, then the client properties are define in com.netflix.client.config.CommonClientConfigKey.",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.service-path",
      "type": "java.lang.String",
      "description": "The path to look for for service discovery",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": "\/services\/"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.timeout",
      "type": "java.lang.Long",
      "description": "To set the maximum time an action could take to complete.",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.type",
      "type": "java.lang.String",
      "description": "To set the discovery type, valid values are on-demand and watch.",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": "on-demand"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.uris",
      "type": "java.lang.String",
      "description": "The URIs the client can connect to.",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.etcd.service-discovery.user-name",
      "type": "java.lang.String",
      "description": "The user name to use for basic authentication.",
      "sourceType": "org.apache.camel.model.cloud.springboot.EtcdServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.api-version",
      "type": "java.lang.String",
      "description": "Sets the API version when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.ca-cert-data",
      "type": "java.lang.String",
      "description": "Sets the Certificate Authority data when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.ca-cert-file",
      "type": "java.lang.String",
      "description": "Sets the Certificate Authority data that are loaded from the file when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.client-cert-data",
      "type": "java.lang.String",
      "description": "Sets the Client Certificate data when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.client-cert-file",
      "type": "java.lang.String",
      "description": "Sets the Client Certificate data that are loaded from the file when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.client-key-algo",
      "type": "java.lang.String",
      "description": "Sets the Client Keystore algorithm, such as RSA when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.client-key-data",
      "type": "java.lang.String",
      "description": "Sets the Client Keystore data when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.client-key-file",
      "type": "java.lang.String",
      "description": "Sets the Client Keystore data that are loaded from the file when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.client-key-passphrase",
      "type": "java.lang.String",
      "description": "Sets the Client Keystore passphrase when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.dns-domain",
      "type": "java.lang.String",
      "description": "Sets the DNS domain to use for DNS lookup.",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": true
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.lookup",
      "type": "java.lang.String",
      "description": "How to perform service lookup. Possible values: client, dns, environment. When using client, then the client queries the kubernetes master to obtain a list of active pods that provides the service, and then random (or round robin) select a pod. When using dns the service name is resolved as name.namespace.svc.dnsDomain. When using dnssrv the service name is resolved with SRV query for _._...svc... When using environment then environment variables are used to lookup the service. By default environment is used.",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": "environment"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.master-url",
      "type": "java.lang.String",
      "description": "Sets the URL to the master when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.namespace",
      "type": "java.lang.String",
      "description": "Sets the namespace to use. Will by default use namespace from the ENV variable KUBERNETES_MASTER.",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.oauth-token",
      "type": "java.lang.String",
      "description": "Sets the OAUTH token for authentication (instead of username\/password) when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.password",
      "type": "java.lang.String",
      "description": "Sets the password for authentication when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.port-name",
      "type": "java.lang.String",
      "description": "Sets the Port Name to use for DNS\/DNSSRV lookup.",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.port-protocol",
      "type": "java.lang.String",
      "description": "Sets the Port Protocol to use for DNS\/DNSSRV lookup.",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using ribbon, then the client properties are define in com.netflix.client.config.CommonClientConfigKey.",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.trust-certs",
      "type": "java.lang.Boolean",
      "description": "Sets whether to turn on trust certificate check when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties",
      "defaultValue": false
    },
    {
      "name": "camel.cloud.kubernetes.service-discovery.username",
      "type": "java.lang.String",
      "description": "Sets the username for authentication when using client lookup",
      "sourceType": "org.apache.camel.model.cloud.springboot.KubernetesServiceCallServiceDiscoveryConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.client-name",
      "type": "java.lang.String",
      "description": "Sets the Ribbon client name",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties",
      "defaultValue": true
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.namespace",
      "type": "java.lang.String",
      "description": "The namespace",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.password",
      "type": "java.lang.String",
      "description": "The password",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Set client properties to use. These properties are specific to what service call implementation are in use. For example if using ribbon, then the client properties are define in com.netflix.client.config.CommonClientConfigKey.",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.cloud.ribbon.load-balancer.username",
      "type": "java.lang.String",
      "description": "The username",
      "sourceType": "org.apache.camel.model.cloud.springboot.RibbonServiceCallServiceLoadBalancerConfigurationProperties"
    },
    {
      "name": "camel.hystrix.allow-maximum-size-to-diverge-from-core-size",
      "type": "java.lang.Boolean",
      "description": "Allows the configuration for maximumSize to take effect. That value can then be equal to, or higher, than coreSize",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.hystrix.circuit-breaker-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to use a HystrixCircuitBreaker or not. If false no circuit-breaker logic will be used and all requests permitted. This is similar in effect to circuitBreakerForceClosed() except that continues tracking metrics and knowing whether it should be open\/closed, this property results in not even instantiating a circuit-breaker.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.circuit-breaker-error-threshold-percentage",
      "type": "java.lang.Integer",
      "description": "Error percentage threshold (as whole number such as 50) at which point the circuit breaker will trip open and reject requests. It will stay tripped for the duration defined in circuitBreakerSleepWindowInMilliseconds; The error percentage this is compared against comes from HystrixCommandMetrics.getHealthCounts().",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 50
    },
    {
      "name": "camel.hystrix.circuit-breaker-force-closed",
      "type": "java.lang.Boolean",
      "description": "If true the HystrixCircuitBreaker#allowRequest() will always return true to allow requests regardless of the error percentage from HystrixCommandMetrics.getHealthCounts(). The circuitBreakerForceOpen() property takes precedence so if it set to true this property does nothing.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.hystrix.circuit-breaker-force-open",
      "type": "java.lang.Boolean",
      "description": "If true the HystrixCircuitBreaker.allowRequest() will always return false, causing the circuit to be open (tripped) and reject all requests. This property takes precedence over circuitBreakerForceClosed();",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.hystrix.circuit-breaker-request-volume-threshold",
      "type": "java.lang.Integer",
      "description": "Minimum number of requests in the metricsRollingStatisticalWindowInMilliseconds() that must exist before the HystrixCircuitBreaker will trip. If below this number the circuit will not trip regardless of error percentage.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 20
    },
    {
      "name": "camel.hystrix.circuit-breaker-sleep-window-in-milliseconds",
      "type": "java.lang.Integer",
      "description": "The time in milliseconds after a HystrixCircuitBreaker trips open that it should wait before trying requests again.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 5000
    },
    {
      "name": "camel.hystrix.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.springboot.HystrixConfigurationDefinitionCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties"
    },
    {
      "name": "camel.hystrix.core-pool-size",
      "type": "java.lang.Integer",
      "description": "Core thread-pool size that gets passed to java.util.concurrent.ThreadPoolExecutor#setCorePoolSize(int)",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.hystrix.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.execution-isolation-semaphore-max-concurrent-requests",
      "type": "java.lang.Integer",
      "description": "Number of concurrent requests permitted to HystrixCommand.run(). Requests beyond the concurrent limit will be rejected. Applicable only when executionIsolationStrategy == SEMAPHORE.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 20
    },
    {
      "name": "camel.hystrix.execution-isolation-strategy",
      "type": "java.lang.String",
      "description": "What isolation strategy HystrixCommand.run() will be executed with. If THREAD then it will be executed on a separate thread and concurrent requests limited by the number of threads in the thread-pool. If SEMAPHORE then it will be executed on the calling thread and concurrent requests limited by the semaphore count.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": "THREAD"
    },
    {
      "name": "camel.hystrix.execution-isolation-thread-interrupt-on-timeout",
      "type": "java.lang.Boolean",
      "description": "Whether the execution thread should attempt an interrupt (using Future#cancel ) when a thread times out. Applicable only when executionIsolationStrategy() == THREAD.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.execution-timeout-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether the timeout mechanism is enabled for this command",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.execution-timeout-in-milliseconds",
      "type": "java.lang.Integer",
      "description": "Time in milliseconds at which point the command will timeout and halt execution. If executionIsolationThreadInterruptOnTimeout == true and the command is thread-isolated, the executing thread will be interrupted. If the command is semaphore-isolated and a HystrixObservableCommand, that command will get unsubscribed.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 1000
    },
    {
      "name": "camel.hystrix.fallback-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether HystrixCommand.getFallback() should be attempted when failure occurs.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.fallback-isolation-semaphore-max-concurrent-requests",
      "type": "java.lang.Integer",
      "description": "Number of concurrent requests permitted to HystrixCommand.getFallback(). Requests beyond the concurrent limit will fail-fast and not attempt retrieving a fallback.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.hystrix.group-key",
      "type": "java.lang.String",
      "description": "Sets the group key to use. The default value is CamelHystrix.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": "CamelHystrix"
    },
    {
      "name": "camel.hystrix.keep-alive-time",
      "type": "java.lang.Integer",
      "description": "Keep-alive time in minutes that gets passed to ThreadPoolExecutor#setKeepAliveTime(long,TimeUnit)",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 1
    },
    {
      "name": "camel.hystrix.max-queue-size",
      "type": "java.lang.Integer",
      "description": "Max queue size that gets passed to BlockingQueue in HystrixConcurrencyStrategy.getBlockingQueue(int) This should only affect the instantiation of a threadpool - it is not eliglible to change a queue size on the fly. For that, use queueSizeRejectionThreshold().",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": -1
    },
    {
      "name": "camel.hystrix.maximum-size",
      "type": "java.lang.Integer",
      "description": "Maximum thread-pool size that gets passed to ThreadPoolExecutor#setMaximumPoolSize(int) . This is the maximum amount of concurrency that can be supported without starting to reject HystrixCommands. Please note that this setting only takes effect if you also set allowMaximumSizeToDivergeFromCoreSize",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.hystrix.metrics-health-snapshot-interval-in-milliseconds",
      "type": "java.lang.Integer",
      "description": "Time in milliseconds to wait between allowing health snapshots to be taken that calculate success and error percentages and affect HystrixCircuitBreaker.isOpen() status. On high-volume circuits the continual calculation of error percentage can become CPU intensive thus this controls how often it is calculated.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 500
    },
    {
      "name": "camel.hystrix.metrics-rolling-percentile-bucket-size",
      "type": "java.lang.Integer",
      "description": "Maximum number of values stored in each bucket of the rolling percentile. This is passed into HystrixRollingPercentile inside HystrixCommandMetrics.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.hystrix.metrics-rolling-percentile-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether percentile metrics should be captured using HystrixRollingPercentile inside HystrixCommandMetrics.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.metrics-rolling-percentile-window-buckets",
      "type": "java.lang.Integer",
      "description": "Number of buckets the rolling percentile window is broken into. This is passed into HystrixRollingPercentile inside HystrixCommandMetrics.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 6
    },
    {
      "name": "camel.hystrix.metrics-rolling-percentile-window-in-milliseconds",
      "type": "java.lang.Integer",
      "description": "Duration of percentile rolling window in milliseconds. This is passed into HystrixRollingPercentile inside HystrixCommandMetrics.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10000
    },
    {
      "name": "camel.hystrix.metrics-rolling-statistical-window-buckets",
      "type": "java.lang.Integer",
      "description": "Number of buckets the rolling statistical window is broken into. This is passed into HystrixRollingNumber inside HystrixCommandMetrics.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.hystrix.metrics-rolling-statistical-window-in-milliseconds",
      "type": "java.lang.Integer",
      "description": "This property sets the duration of the statistical rolling window, in milliseconds. This is how long metrics are kept for the thread pool. The window is divided into buckets and rolls by those increments.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10000
    },
    {
      "name": "camel.hystrix.queue-size-rejection-threshold",
      "type": "java.lang.Integer",
      "description": "Queue size rejection threshold is an artificial max size at which rejections will occur even if maxQueueSize has not been reached. This is done because the maxQueueSize of a BlockingQueue can not be dynamically changed and we want to support dynamically changing the queue size that affects rejections. This is used by HystrixCommand when queuing a thread for execution.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 5
    },
    {
      "name": "camel.hystrix.request-log-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether HystrixCommand execution and events should be logged to HystrixRequestLog.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.hystrix.thread-pool-key",
      "type": "java.lang.String",
      "description": "Sets the thread pool key to use. Will by default use the same value as groupKey has been configured to use.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": "CamelHystrix"
    },
    {
      "name": "camel.hystrix.thread-pool-rolling-number-statistical-window-buckets",
      "type": "java.lang.Integer",
      "description": "Number of buckets the rolling statistical window is broken into. This is passed into HystrixRollingNumber inside each HystrixThreadPoolMetrics instance.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.hystrix.thread-pool-rolling-number-statistical-window-in-milliseconds",
      "type": "java.lang.Integer",
      "description": "Duration of statistical rolling window in milliseconds. This is passed into HystrixRollingNumber inside each HystrixThreadPoolMetrics instance.",
      "sourceType": "org.apache.camel.model.springboot.HystrixConfigurationDefinitionProperties",
      "defaultValue": 10000
    },
    {
      "name": "camel.language.constant.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.constant.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the constant language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.constant.springboot.ConstantLanguageConfiguration"
    },
    {
      "name": "camel.language.constant.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.constant.springboot.ConstantLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.csimple.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.csimple.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the csimple language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.csimple.springboot.CSimpleLanguageConfiguration"
    },
    {
      "name": "camel.language.csimple.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.csimple.springboot.CSimpleLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.exchange-property.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.exchange-property.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the exchangeProperty language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.property.springboot.ExchangePropertyLanguageConfiguration"
    },
    {
      "name": "camel.language.exchange-property.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.property.springboot.ExchangePropertyLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.file.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.file.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the file language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.simple.springboot.FileLanguageConfiguration"
    },
    {
      "name": "camel.language.file.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.simple.springboot.FileLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.header.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.header.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the header language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.header.springboot.HeaderLanguageConfiguration"
    },
    {
      "name": "camel.language.header.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.header.springboot.HeaderLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.ref.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.ref.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the ref language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.ref.springboot.RefLanguageConfiguration"
    },
    {
      "name": "camel.language.ref.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.ref.springboot.RefLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.simple.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.simple.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the simple language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.simple.springboot.SimpleLanguageConfiguration"
    },
    {
      "name": "camel.language.simple.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.simple.springboot.SimpleLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.language.tokenize.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.LanguageConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.language.tokenize.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the tokenize language. This is enabled by default.",
      "sourceType": "org.apache.camel.language.tokenizer.springboot.TokenizeLanguageConfiguration"
    },
    {
      "name": "camel.language.tokenize.group-delimiter",
      "type": "java.lang.String",
      "description": "Sets the delimiter to use when grouping. If this has not been set then token will be used as the delimiter.",
      "sourceType": "org.apache.camel.language.tokenizer.springboot.TokenizeLanguageConfiguration"
    },
    {
      "name": "camel.language.tokenize.trim",
      "type": "java.lang.Boolean",
      "description": "Whether to trim the value to remove leading and trailing whitespaces and line breaks",
      "sourceType": "org.apache.camel.language.tokenizer.springboot.TokenizeLanguageConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.resilience4j.automatic-transition-from-open-to-half-open-enabled",
      "type": "java.lang.Boolean",
      "description": "Enables automatic transition from OPEN to HALF_OPEN state once the waitDurationInOpenState has passed.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.resilience4j.circuit-breaker",
      "type": "java.lang.String",
      "description": "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties"
    },
    {
      "name": "camel.resilience4j.config",
      "type": "java.lang.String",
      "description": "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreakerConfig instance to lookup and use from the registry.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties"
    },
    {
      "name": "camel.resilience4j.configurations",
      "type": "java.util.Map<java.lang.String,org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionCommon>",
      "description": "Define additional configuration definitions",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties"
    },
    {
      "name": "camel.resilience4j.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the component",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.resilience4j.failure-rate-threshold",
      "type": "java.lang.Float",
      "description": "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties"
    },
    {
      "name": "camel.resilience4j.minimum-number-of-calls",
      "type": "java.lang.Integer",
      "description": "Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate. For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed. Default minimumNumberOfCalls is 100",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": 100
    },
    {
      "name": "camel.resilience4j.permitted-number-of-calls-in-half-open-state",
      "type": "java.lang.Integer",
      "description": "Configures the number of permitted calls when the CircuitBreaker is half open. The size must be greater than 0. Default size is 10.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": 10
    },
    {
      "name": "camel.resilience4j.sliding-window-size",
      "type": "java.lang.Integer",
      "description": "Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. slidingWindowSize configures the size of the sliding window. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. The slidingWindowSize must be greater than 0. The minimumNumberOfCalls must be greater than 0. If the slidingWindowType is COUNT_BASED, the minimumNumberOfCalls cannot be greater than slidingWindowSize . If the slidingWindowType is TIME_BASED, you can pick whatever you want. Default slidingWindowSize is 100.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": 100
    },
    {
      "name": "camel.resilience4j.sliding-window-type",
      "type": "java.lang.String",
      "description": "Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. Default slidingWindowType is COUNT_BASED.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": "COUNT_BASED"
    },
    {
      "name": "camel.resilience4j.slow-call-duration-threshold",
      "type": "java.lang.Integer",
      "description": "Configures the duration threshold (seconds) above which calls are considered as slow and increase the slow calls percentage. Default value is 60 seconds.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": 60
    },
    {
      "name": "camel.resilience4j.slow-call-rate-threshold",
      "type": "java.lang.Float",
      "description": "Configures a threshold in percentage. The CircuitBreaker considers a call as slow when the call duration is greater than slowCallDurationThreshold Duration. When the percentage of slow calls is equal or greater the threshold, the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 100 percentage which means that all recorded calls must be slower than slowCallDurationThreshold.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties"
    },
    {
      "name": "camel.resilience4j.wait-duration-in-open-state",
      "type": "java.lang.Integer",
      "description": "Configures the wait duration (in seconds) which specifies how long the CircuitBreaker should stay open, before it switches to half open. Default value is 60 seconds.",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": 60
    },
    {
      "name": "camel.resilience4j.writable-stack-trace-enabled",
      "type": "java.lang.Boolean",
      "description": "Enables writable stack traces. When set to false, Exception.getStackTrace returns a zero length array. This may be used to reduce log spam when the circuit breaker is open as the cause of the exceptions is already known (the circuit breaker is short-circuiting calls).",
      "sourceType": "org.apache.camel.model.springboot.Resilience4jConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.rest.api-component",
      "type": "java.lang.String",
      "description": "The name of the Camel component to use as the REST API. If no API Component has been explicit configured, then Camel will lookup if there is a Camel component responsible for servicing and generating the REST API documentation, or if a org.apache.camel.spi.RestApiProcessorFactory is registered in the registry. If either one is found, then that is being used.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.api-context-path",
      "type": "java.lang.String",
      "description": "Sets a leading API context-path the REST API services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.api-host",
      "type": "java.lang.String",
      "description": "To use a specific hostname for the API documentation (such as swagger or openapi) This can be used to override the generated host with this configured hostname",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.api-property",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Allows to configure as many additional properties for the api documentation. For example set property api.title to my cool stuff",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.api-vendor-extension",
      "type": "java.lang.Boolean",
      "description": "Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information as vendor extension (eg keys starting with x-) such as route ids, class names etc. Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.rest.binding-mode",
      "type": "org.apache.camel.model.rest.RestBindingMode",
      "description": "Sets the binding mode to use. The default value is off",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.client-request-validation",
      "type": "java.lang.Boolean",
      "description": "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.rest.component",
      "type": "java.lang.String",
      "description": "The Camel Rest component to use for the REST transport (consumer), such as netty-http, jetty, servlet, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found, then that is being used.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.component-property",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Allows to configure as many additional properties for the rest component in use.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.consumer-property",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Allows to configure as many additional properties for the rest consumer in use.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.context-path",
      "type": "java.lang.String",
      "description": "Sets a leading context-path the REST services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path. Or for components such as camel-jetty or camel-netty-http that includes a HTTP server.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.cors-headers",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Allows to configure custom CORS headers.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.data-format-property",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Allows to configure as many additional properties for the data formats in use. For example set property prettyPrint to true to have json outputted in pretty mode. The properties can be prefixed to denote the option is only for either JSON or XML and for either the IN or the OUT. The prefixes are: json.in. json.out. xml.in. xml.out. For example a key with value xml.out.mustBeJAXBElement is only for the XML data format for the outgoing. A key without a prefix is a common key for all situations.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.enable-cors",
      "type": "java.lang.Boolean",
      "description": "Whether to enable CORS headers in the HTTP response. The default value is false.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.rest.endpoint-property",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Allows to configure as many additional properties for the rest endpoint in use.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.host",
      "type": "java.lang.String",
      "description": "The hostname to use for exposing the REST service.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.host-name-resolver",
      "type": "org.apache.camel.model.rest.RestHostNameResolver",
      "description": "If no hostname has been explicit configured, then this resolver is used to compute the hostname the REST service will be using.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.json-data-format",
      "type": "java.lang.String",
      "description": "Name of specific json data format to use. By default jackson will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.port",
      "type": "java.lang.String",
      "description": "The port number to use for exposing the REST service. Notice if you use servlet component then the port number configured here does not apply, as the port number in use is the actual port number the servlet component is using. eg if using Apache Tomcat its the tomcat http port, if using Apache Karaf its the HTTP service in Karaf that uses port 8181 by default etc. Though in those situations setting the port number here, allows tooling and JMX to know the port number, so its recommended to set the port number to the number that the servlet engine uses.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.producer-api-doc",
      "type": "java.lang.String",
      "description": "Sets the location of the api document the REST producer will use to validate the REST uri and query parameters are valid accordingly to the api document. The location of the api document is loaded from classpath by default, but you can use file: or http: to refer to resources to load from file or http url.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.producer-component",
      "type": "java.lang.String",
      "description": "Sets the name of the Camel component to use as the REST producer",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.scheme",
      "type": "java.lang.String",
      "description": "The scheme to use for exposing the REST service. Usually http or https is supported. The default value is http",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    },
    {
      "name": "camel.rest.skip-binding-on-error-code",
      "type": "java.lang.Boolean",
      "description": "Whether to skip binding on output if there is a custom HTTP error code header. This allows to build custom error messages that do not bind to json \/ xml etc, as success messages otherwise will do.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties",
      "defaultValue": false
    },
    {
      "name": "camel.rest.use-x-forward-headers",
      "type": "java.lang.Boolean",
      "description": "Whether to use X-Forward headers for Host and related setting. The default value is true.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties",
      "defaultValue": true
    },
    {
      "name": "camel.rest.xml-data-format",
      "type": "java.lang.String",
      "description": "Name of specific XML data format to use. By default jaxb will be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.",
      "sourceType": "org.apache.camel.model.rest.springboot.RestConfigurationDefinitionProperties"
    }
  ],
  "hints": []
}