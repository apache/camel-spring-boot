/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.tensorflow.serving.springboot;

import io.grpc.ChannelCredentials;
import org.apache.camel.component.tensorflow.serving.TensorFlowServingConfiguration;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Provide access to TensorFlow Serving model servers to run inference with
 * TensorFlow saved models remotely
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.component.tensorflow-serving")
public class TensorFlowServingComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the tensorflow-serving component.
     * This is enabled by default.
     */
    private Boolean enabled;
    /**
     * The configuration. The option is a
     * org.apache.camel.component.tensorflow.serving.TensorFlowServingConfiguration type.
     */
    private TensorFlowServingConfiguration configuration;
    /**
     * Required servable name.
     */
    private String modelName;
    /**
     * Optional choice of which version of the model to use. Use this specific
     * version number.
     */
    private Long modelVersion;
    /**
     * Optional choice of which version of the model to use. Use the version
     * associated with the given label.
     */
    private String modelVersionLabel;
    /**
     * A named signature to evaluate. If unspecified, the default signature will
     * be used.
     */
    private String signatureName;
    /**
     * The target URI of the client. See:
     * https://grpc.github.io/grpc-java/javadoc/io/grpc/Grpc.html#newChannelBuilder(java.lang.String,io.grpc.ChannelCredentials)
     */
    private String target = "localhost:8500";
    /**
     * Whether the producer should be started lazy (on the first message). By
     * starting lazy you can use this to allow CamelContext and routes to
     * startup in situations where a producer may otherwise fail during starting
     * and cause the route to fail being started. By deferring this startup to
     * be lazy then the startup failure can be handled during routing messages
     * via Camel's routing error handlers. Beware that when the first message is
     * processed then creating and starting the producer may take a little time
     * and prolong the total processing time of the processing.
     */
    private Boolean lazyStartProducer = false;
    /**
     * Whether autowiring is enabled. This is used for automatic autowiring
     * options (the option must be marked as autowired) by looking up in the
     * registry to find if there is a single instance of matching type, which
     * then gets configured on the component. This can be used for automatic
     * configuring JDBC data sources, JMS connection factories, AWS Clients,
     * etc.
     */
    private Boolean autowiredEnabled = true;
    /**
     * The credentials of the client. The option is a io.grpc.ChannelCredentials
     * type.
     */
    private ChannelCredentials credentials;

    public TensorFlowServingConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(TensorFlowServingConfiguration configuration) {
        this.configuration = configuration;
    }

    public String getModelName() {
        return modelName;
    }

    public void setModelName(String modelName) {
        this.modelName = modelName;
    }

    public Long getModelVersion() {
        return modelVersion;
    }

    public void setModelVersion(Long modelVersion) {
        this.modelVersion = modelVersion;
    }

    public String getModelVersionLabel() {
        return modelVersionLabel;
    }

    public void setModelVersionLabel(String modelVersionLabel) {
        this.modelVersionLabel = modelVersionLabel;
    }

    public String getSignatureName() {
        return signatureName;
    }

    public void setSignatureName(String signatureName) {
        this.signatureName = signatureName;
    }

    public String getTarget() {
        return target;
    }

    public void setTarget(String target) {
        this.target = target;
    }

    public Boolean getLazyStartProducer() {
        return lazyStartProducer;
    }

    public void setLazyStartProducer(Boolean lazyStartProducer) {
        this.lazyStartProducer = lazyStartProducer;
    }

    public Boolean getAutowiredEnabled() {
        return autowiredEnabled;
    }

    public void setAutowiredEnabled(Boolean autowiredEnabled) {
        this.autowiredEnabled = autowiredEnabled;
    }

    public ChannelCredentials getCredentials() {
        return credentials;
    }

    public void setCredentials(ChannelCredentials credentials) {
        this.credentials = credentials;
    }
}