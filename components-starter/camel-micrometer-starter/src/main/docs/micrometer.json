{
  "groups": [
    {
      "name": "camel.component.micrometer",
      "type": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration",
      "sourceType": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration"
    },
    {
      "name": "camel.component.micrometer.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.metrics",
      "type": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration"
    }
  ],
  "properties": [
    {
      "name": "camel.component.micrometer.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.micrometer.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.micrometer.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the micrometer component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration"
    },
    {
      "name": "camel.component.micrometer.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.micrometer.metrics-registry",
      "type": "io.micrometer.core.instrument.MeterRegistry",
      "description": "To use a custom configured MetricRegistry. The option is a io.micrometer.core.instrument.MeterRegistry type.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.MicrometerComponentConfiguration"
    },
    {
      "name": "camel.metrics.base-endpoint-uri-exchange-event-notifier",
      "type": "java.lang.Boolean",
      "description": "Set whether to use base endpoint URI when capturing metrics on exchange processing times.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.metrics.enable-exchange-event-notifier",
      "type": "java.lang.Boolean",
      "description": "Set whether to enable the MicrometerExchangeEventNotifier for capturing metrics on exchange processing times.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.metrics.enable-instrumented-thread-pool-factory",
      "type": "java.lang.Boolean",
      "description": "Set whether to gather performance information about Camel Thread Pools by injecting an InstrumentedThreadPoolFactory.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.metrics.enable-message-history",
      "type": "java.lang.Boolean",
      "description": "Set whether to enable the MicrometerMessageHistoryFactory for capturing metrics on individual route node processing times. Depending on the number of configured route nodes, there is the potential to create a large volume of metrics. Therefore, this option is disabled by default.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.metrics.enable-route-event-notifier",
      "type": "java.lang.Boolean",
      "description": "Set whether to enable the MicrometerRouteEventNotifier for capturing metrics on the total number of routes and total number of routes running.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.metrics.enable-route-policy",
      "type": "java.lang.Boolean",
      "description": "Set whether to enable the MicrometerRoutePolicyFactory for capturing metrics on route processing times.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.metrics.naming-strategy",
      "type": "java.lang.String",
      "description": "Controls the name style to use for metrics. Default = uses micrometer naming convention. Legacy = uses the classic naming style (camelCase)",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": "default"
    },
    {
      "name": "camel.metrics.route-policy-exclude-pattern",
      "type": "java.lang.String",
      "description": "Pattern to exclude routes (by id) to capture. Multiple route ids can be separated by comma.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration"
    },
    {
      "name": "camel.metrics.route-policy-level",
      "type": "java.lang.String",
      "description": "Sets the level of information to capture. Possible values are all,route,context. all = both context and routes. route = routes only. context = camel context only.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": "all"
    },
    {
      "name": "camel.metrics.uri-tag-dynamic",
      "type": "java.lang.Boolean",
      "description": "Whether to use static or dynamic values for HTTP uri tags in captured metrics. When using dynamic tags, then a REST service with base URL: \/users\/{id} will capture metrics with uri tag with the actual dynamic value such as: \/users\/123. However, this can lead to many tags as the URI is dynamic, so use this with care.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.metrics.uri-tag-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether HTTP uri tags should be enabled or not in captured metrics. If disabled then the uri tag, is likely not able to be resolved and will be marked as UNKNOWN.",
      "sourceType": "org.apache.camel.component.micrometer.springboot.metrics.CamelMetricsConfiguration",
      "defaultValue": true
    }
  ],
  "hints": []
}