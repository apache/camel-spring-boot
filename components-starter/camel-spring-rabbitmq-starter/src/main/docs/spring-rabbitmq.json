{
  "groups": [
    {
      "name": "camel.component.spring-rabbitmq",
      "type": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.spring-rabbitmq.allow-null-body",
      "type": "java.lang.Boolean",
      "description": "Whether to allow sending messages with no body. If this option is false and the message body is null, then an MessageConversionException is thrown.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.spring-rabbitmq.amqp-admin",
      "type": "org.springframework.amqp.core.AmqpAdmin",
      "description": "Optional AMQP Admin service to use for auto declaring elements (queues, exchanges, bindings). The option is a org.springframework.amqp.core.AmqpAdmin type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.auto-declare",
      "type": "java.lang.Boolean",
      "description": "Specifies whether the consumer should auto declare binding between exchange, queue and routing key when starting. Enabling this can be good for development to make it easy to standup exchanges, queues and bindings on the broker.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.spring-rabbitmq.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Specifies whether the consumer container should auto-startup.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.spring-rabbitmq.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.spring-rabbitmq.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.spring-rabbitmq.concurrent-consumers",
      "type": "java.lang.Integer",
      "description": "The number of consumers",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": 1
    },
    {
      "name": "camel.component.spring-rabbitmq.connection-factory",
      "type": "org.springframework.amqp.rabbit.connection.ConnectionFactory",
      "description": "The connection factory to be use. A connection factory must be configured either on the component or endpoint. The option is a org.springframework.amqp.rabbit.connection.ConnectionFactory type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.spring-rabbitmq.dead-letter-exchange",
      "type": "java.lang.String",
      "description": "The name of the dead letter exchange",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.dead-letter-exchange-type",
      "type": "java.lang.String",
      "description": "The type of the dead letter exchange",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": "direct"
    },
    {
      "name": "camel.component.spring-rabbitmq.dead-letter-queue",
      "type": "java.lang.String",
      "description": "The name of the dead letter queue",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.dead-letter-routing-key",
      "type": "java.lang.String",
      "description": "The routing key for the dead letter exchange",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the spring-rabbitmq component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.error-handler",
      "type": "org.springframework.util.ErrorHandler",
      "description": "To use a custom ErrorHandler for handling exceptions from the message listener (consumer). The option is a org.springframework.util.ErrorHandler type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.header-filter-strategy",
      "type": "org.apache.camel.spi.HeaderFilterStrategy",
      "description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message. The option is a org.apache.camel.spi.HeaderFilterStrategy type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.ignore-declaration-exceptions",
      "type": "java.lang.Boolean",
      "description": "Switch on ignore exceptions such as mismatched properties when declaring",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.spring-rabbitmq.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.spring-rabbitmq.listener-container-factory",
      "type": "org.apache.camel.component.springrabbit.ListenerContainerFactory",
      "description": "To use a custom factory for creating and configuring ListenerContainer to be used by the consumer for receiving messages. The option is a org.apache.camel.component.springrabbit.ListenerContainerFactory type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.max-concurrent-consumers",
      "type": "java.lang.Integer",
      "description": "The maximum number of consumers (available only with SMLC)",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.maximum-retry-attempts",
      "type": "java.lang.Integer",
      "description": "How many times a Rabbitmq consumer will retry the same message if Camel failed to process the message",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": 5
    },
    {
      "name": "camel.component.spring-rabbitmq.message-converter",
      "type": "org.springframework.amqp.support.converter.MessageConverter",
      "description": "To use a custom MessageConverter so you can be in control how to map to\/from a org.springframework.amqp.core.Message. The option is a org.springframework.amqp.support.converter.MessageConverter type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.message-listener-container-type",
      "type": "java.lang.String",
      "description": "The type of the MessageListenerContainer",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": "DMLC"
    },
    {
      "name": "camel.component.spring-rabbitmq.message-properties-converter",
      "type": "org.apache.camel.component.springrabbit.MessagePropertiesConverter",
      "description": "To use a custom MessagePropertiesConverter so you can be in control how to map to\/from a org.springframework.amqp.core.MessageProperties. The option is a org.apache.camel.component.springrabbit.MessagePropertiesConverter type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.prefetch-count",
      "type": "java.lang.Integer",
      "description": "Tell the broker how many messages to send to each consumer in a single request. Often this can be set quite high to improve throughput.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": 250
    },
    {
      "name": "camel.component.spring-rabbitmq.reject-and-dont-requeue",
      "type": "java.lang.Boolean",
      "description": "Whether a Rabbitmq consumer should reject the message without requeuing. This enables failed messages to be sent to a Dead Letter Exchange\/Queue, if the broker is so configured.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.spring-rabbitmq.reply-timeout",
      "type": "java.lang.Long",
      "description": "Specify the timeout in milliseconds to be used when waiting for a reply message when doing request\/reply messaging. The default value is 5 seconds. A negative value indicates an indefinite timeout. The option is a long type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.spring-rabbitmq.retry",
      "type": "org.springframework.retry.interceptor.RetryOperationsInterceptor",
      "description": "Custom retry configuration to use. If this is configured then the other settings such as maximumRetryAttempts for retry are not in use. The option is a org.springframework.retry.interceptor.RetryOperationsInterceptor type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration"
    },
    {
      "name": "camel.component.spring-rabbitmq.retry-delay",
      "type": "java.lang.Integer",
      "description": "Delay in msec a Rabbitmq consumer will wait before redelivering a message that Camel failed to process",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": 1000
    },
    {
      "name": "camel.component.spring-rabbitmq.shutdown-timeout",
      "type": "java.lang.Long",
      "description": "The time to wait for workers in milliseconds after the container is stopped. If any workers are active when the shutdown signal comes they will be allowed to finish processing as long as they can finish within this timeout. The option is a long type.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.spring-rabbitmq.test-connection-on-startup",
      "type": "java.lang.Boolean",
      "description": "Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well.",
      "sourceType": "org.apache.camel.component.springrabbit.springboot.SpringRabbitMQComponentConfiguration",
      "defaultValue": false
    }
  ],
  "hints": []
}