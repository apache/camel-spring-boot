/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.pqc.dataformat.springboot;

import org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Encrypt and decrypt messages using Post-Quantum Cryptography Key
 * Encapsulation Mechanisms (KEM).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.dataformat.pqc")
public class PQCDataFormatConfiguration
        extends
            DataFormatConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the pqc data format. This is
     * enabled by default.
     */
    private Boolean enabled;
    /**
     * The Post-Quantum KEM algorithm to use for key encapsulation. Supported
     * values: MLKEM, BIKE, HQC, CMCE, SABER, FRODO, NTRU, NTRULPRime,
     * SNTRUPrime, KYBER
     */
    private String keyEncapsulationAlgorithm = "MLKEM";
    /**
     * The symmetric encryption algorithm to use with the shared secret.
     * Supported values: AES, ARIA, RC2, RC5, CAMELLIA, CAST5, CAST6,
     * CHACHA7539, etc.
     */
    private String symmetricKeyAlgorithm = "AES";
    /**
     * The length (in bits) of the symmetric key.
     */
    private Integer symmetricKeyLength = 128;
    /**
     * Refers to the KeyPair to lookup from the register to use for KEM
     * operations. The option is a java.security.KeyPair type.
     */
    private String keyPair;
    /**
     * The size of the buffer used for streaming encryption/decryption.
     */
    private Integer bufferSize = 4096;
    /**
     * The JCE security provider to use.
     */
    private String provider;
    /**
     * Refers to a custom KeyGenerator to lookup from the register for KEM
     * operations. The option is a javax.crypto.KeyGenerator type.
     */
    private String keyGenerator;

    public String getKeyEncapsulationAlgorithm() {
        return keyEncapsulationAlgorithm;
    }

    public void setKeyEncapsulationAlgorithm(String keyEncapsulationAlgorithm) {
        this.keyEncapsulationAlgorithm = keyEncapsulationAlgorithm;
    }

    public String getSymmetricKeyAlgorithm() {
        return symmetricKeyAlgorithm;
    }

    public void setSymmetricKeyAlgorithm(String symmetricKeyAlgorithm) {
        this.symmetricKeyAlgorithm = symmetricKeyAlgorithm;
    }

    public Integer getSymmetricKeyLength() {
        return symmetricKeyLength;
    }

    public void setSymmetricKeyLength(Integer symmetricKeyLength) {
        this.symmetricKeyLength = symmetricKeyLength;
    }

    public String getKeyPair() {
        return keyPair;
    }

    public void setKeyPair(String keyPair) {
        this.keyPair = keyPair;
    }

    public Integer getBufferSize() {
        return bufferSize;
    }

    public void setBufferSize(Integer bufferSize) {
        this.bufferSize = bufferSize;
    }

    public String getProvider() {
        return provider;
    }

    public void setProvider(String provider) {
        this.provider = provider;
    }

    public String getKeyGenerator() {
        return keyGenerator;
    }

    public void setKeyGenerator(String keyGenerator) {
        this.keyGenerator = keyGenerator;
    }
}