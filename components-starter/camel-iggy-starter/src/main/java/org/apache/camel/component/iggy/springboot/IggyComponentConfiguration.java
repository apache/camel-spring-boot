/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.iggy.springboot;

import org.apache.camel.component.iggy.IggyComponent;
import org.apache.camel.component.iggy.IggyConfiguration;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.apache.iggy.message.Partitioning;
import org.apache.iggy.topic.CompressionAlgorithm;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Camel Iggy component
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.component.iggy")
public class IggyComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the iggy component. This is
     * enabled by default.
     */
    private Boolean enabled;
    /**
     * Whether to automatically create stream if it does not exist
     */
    private Boolean autoCreateStream = true;
    /**
     * Whether to automatically create topic if it does not exist
     */
    private Boolean autoCreateTopic = true;
    /**
     * Polling strategy
     */
    private String clientTransport = "TCP";
    /**
     * Compression algorithm for message payload
     */
    private CompressionAlgorithm compressionAlgorithm = CompressionAlgorithm.None;
    /**
     * Allows to pre-configure the Iggy component with common options that the
     * endpoints will reuse. The option is a
     * org.apache.camel.component.iggy.IggyConfiguration type.
     */
    private IggyConfiguration configuration;
    /**
     * Iggy server hostname or IP address
     */
    private String host = "localhost";
    /**
     * Maximum topic size in bytes (0 means unlimited)
     */
    private Long maxTopicSize = 0L;
    /**
     * Message expiry time in seconds (0 means no expiry)
     */
    private Long messageExpiry = 0L;
    /**
     * Number of partitions for the topic
     */
    private Long partitionsCount = 1L;
    /**
     * Iggy password
     */
    private String password;
    /**
     * Iggy server port number
     */
    private Integer port = 8090;
    /**
     * Replication factor for the topic
     */
    private Short replicationFactor;
    /**
     * Stream identifier
     */
    private Long streamId;
    /**
     * Stream name
     */
    private String streamName;
    /**
     * Controls message acknowledgment behavior. When true, messages are
     * automatically marked as processed after consumption. When false, enables
     * manual offset management and allows setting a custom starting offset
     * position
     */
    private Boolean autoCommit = true;
    /**
     * Allows for bridging the consumer to the Camel routing Error Handler,
     * which mean any exceptions (if possible) occurred while the Camel consumer
     * is trying to pickup incoming messages, or the likes, will now be
     * processed as a message and handled by the routing Error Handler.
     * Important: This is only possible if the 3rd party component allows Camel
     * to be alerted if an exception was thrown. Some components handle this
     * internally only, and therefore bridgeErrorHandler is not possible. In
     * other situations we may improve the Camel component to hook into the 3rd
     * party component and make this possible for future releases. By default
     * the consumer will use the org.apache.camel.spi.ExceptionHandler to deal
     * with exceptions, that will be logged at WARN or ERROR level and ignored.
     */
    private Boolean bridgeErrorHandler = false;
    /**
     * The name of the consumer group
     */
    private String consumerGroupName;
    /**
     * Camel Iggy consumers count
     */
    private Integer consumersCount = 1;
    /**
     * The consumer partition id
     */
    private Long partitionId;
    /**
     * The consumer poll batch size
     */
    private Long pollBatchSize = 10L;
    /**
     * Polling strategy
     */
    private String pollingStrategy = "next";
    /**
     * Camel Iggy shutdown timeout
     */
    private Integer shutdownTimeout = 30000;
    /**
     * Defines the initial message offset position when autoCommit is disabled.
     * Use 0 to start from the beginning of the stream, or specify a custom
     * offset to resume from a particular point
     */
    private Long startingOffset = 0L;
    /**
     * Whether the producer should be started lazy (on the first message). By
     * starting lazy you can use this to allow CamelContext and routes to
     * startup in situations where a producer may otherwise fail during starting
     * and cause the route to fail being started. By deferring this startup to
     * be lazy then the startup failure can be handled during routing messages
     * via Camel's routing error handlers. Beware that when the first message is
     * processed then creating and starting the producer may take a little time
     * and prolong the total processing time of the processing.
     */
    private Boolean lazyStartProducer = false;
    /**
     * Partitioning strategy for message distribution. The option is a
     * org.apache.iggy.message.Partitioning type.
     */
    private Partitioning partitioning;
    /**
     * Whether autowiring is enabled. This is used for automatic autowiring
     * options (the option must be marked as autowired) by looking up in the
     * registry to find if there is a single instance of matching type, which
     * then gets configured on the component. This can be used for automatic
     * configuring JDBC data sources, JMS connection factories, AWS Clients,
     * etc.
     */
    private Boolean autowiredEnabled = true;
    /**
     * Iggy username
     */
    private String username;

    public Boolean getAutoCreateStream() {
        return autoCreateStream;
    }

    public void setAutoCreateStream(Boolean autoCreateStream) {
        this.autoCreateStream = autoCreateStream;
    }

    public Boolean getAutoCreateTopic() {
        return autoCreateTopic;
    }

    public void setAutoCreateTopic(Boolean autoCreateTopic) {
        this.autoCreateTopic = autoCreateTopic;
    }

    public String getClientTransport() {
        return clientTransport;
    }

    public void setClientTransport(String clientTransport) {
        this.clientTransport = clientTransport;
    }

    public CompressionAlgorithm getCompressionAlgorithm() {
        return compressionAlgorithm;
    }

    public void setCompressionAlgorithm(
            CompressionAlgorithm compressionAlgorithm) {
        this.compressionAlgorithm = compressionAlgorithm;
    }

    public IggyConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(IggyConfiguration configuration) {
        this.configuration = configuration;
    }

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public Long getMaxTopicSize() {
        return maxTopicSize;
    }

    public void setMaxTopicSize(Long maxTopicSize) {
        this.maxTopicSize = maxTopicSize;
    }

    public Long getMessageExpiry() {
        return messageExpiry;
    }

    public void setMessageExpiry(Long messageExpiry) {
        this.messageExpiry = messageExpiry;
    }

    public Long getPartitionsCount() {
        return partitionsCount;
    }

    public void setPartitionsCount(Long partitionsCount) {
        this.partitionsCount = partitionsCount;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Integer getPort() {
        return port;
    }

    public void setPort(Integer port) {
        this.port = port;
    }

    public Short getReplicationFactor() {
        return replicationFactor;
    }

    public void setReplicationFactor(Short replicationFactor) {
        this.replicationFactor = replicationFactor;
    }

    public Long getStreamId() {
        return streamId;
    }

    public void setStreamId(Long streamId) {
        this.streamId = streamId;
    }

    public String getStreamName() {
        return streamName;
    }

    public void setStreamName(String streamName) {
        this.streamName = streamName;
    }

    public Boolean getAutoCommit() {
        return autoCommit;
    }

    public void setAutoCommit(Boolean autoCommit) {
        this.autoCommit = autoCommit;
    }

    public Boolean getBridgeErrorHandler() {
        return bridgeErrorHandler;
    }

    public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
        this.bridgeErrorHandler = bridgeErrorHandler;
    }

    public String getConsumerGroupName() {
        return consumerGroupName;
    }

    public void setConsumerGroupName(String consumerGroupName) {
        this.consumerGroupName = consumerGroupName;
    }

    public Integer getConsumersCount() {
        return consumersCount;
    }

    public void setConsumersCount(Integer consumersCount) {
        this.consumersCount = consumersCount;
    }

    public Long getPartitionId() {
        return partitionId;
    }

    public void setPartitionId(Long partitionId) {
        this.partitionId = partitionId;
    }

    public Long getPollBatchSize() {
        return pollBatchSize;
    }

    public void setPollBatchSize(Long pollBatchSize) {
        this.pollBatchSize = pollBatchSize;
    }

    public String getPollingStrategy() {
        return pollingStrategy;
    }

    public void setPollingStrategy(String pollingStrategy) {
        this.pollingStrategy = pollingStrategy;
    }

    public Integer getShutdownTimeout() {
        return shutdownTimeout;
    }

    public void setShutdownTimeout(Integer shutdownTimeout) {
        this.shutdownTimeout = shutdownTimeout;
    }

    public Long getStartingOffset() {
        return startingOffset;
    }

    public void setStartingOffset(Long startingOffset) {
        this.startingOffset = startingOffset;
    }

    public Boolean getLazyStartProducer() {
        return lazyStartProducer;
    }

    public void setLazyStartProducer(Boolean lazyStartProducer) {
        this.lazyStartProducer = lazyStartProducer;
    }

    public Partitioning getPartitioning() {
        return partitioning;
    }

    public void setPartitioning(Partitioning partitioning) {
        this.partitioning = partitioning;
    }

    public Boolean getAutowiredEnabled() {
        return autowiredEnabled;
    }

    public void setAutowiredEnabled(Boolean autowiredEnabled) {
        this.autowiredEnabled = autowiredEnabled;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}