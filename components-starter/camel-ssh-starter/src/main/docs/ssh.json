{
  "groups": [
    {
      "name": "camel.component.ssh",
      "type": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.ssh.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.ssh.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.ssh.cert-resource",
      "type": "java.lang.String",
      "description": "Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate, and depends on keyType setting.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.cert-resource-password",
      "type": "java.lang.String",
      "description": "Sets the password to use in loading certResource, if certResource is an encrypted key.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.channel-type",
      "type": "java.lang.String",
      "description": "Sets the channel type to pass to the Channel as part of command execution. Defaults to exec.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": "exec"
    },
    {
      "name": "camel.component.ssh.configuration",
      "type": "org.apache.camel.component.ssh.SshConfiguration",
      "description": "Component configuration. The option is a org.apache.camel.component.ssh.SshConfiguration type.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.ssh.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the ssh component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.fail-on-unknown-host",
      "type": "java.lang.Boolean",
      "description": "Specifies whether a connection to an unknown host should fail or not. This value is only checked when the property knownHosts is set.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.ssh.key-pair-provider",
      "type": "org.apache.sshd.common.keyprovider.KeyPairProvider",
      "description": "Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server. The option is a org.apache.sshd.common.keyprovider.KeyPairProvider type.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.key-type",
      "type": "java.lang.String",
      "description": "Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. From Camel 3.0.0 \/ 2.25.0, by default Camel will select the first available KeyPair that is loaded. Prior to this, a KeyType of 'ssh-rsa' was enforced by default.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.known-hosts-resource",
      "type": "java.lang.String",
      "description": "Sets the resource path for a known_hosts file",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.ssh.password",
      "type": "java.lang.String",
      "description": "Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.poll-command",
      "type": "java.lang.String",
      "description": "Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer, i.e. from(ssh:\/\/...) You may need to end your command with a newline, and that must be URL encoded %0A",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.shell-prompt",
      "type": "java.lang.String",
      "description": "Sets the shellPrompt to be dropped when response is read after command execution",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    },
    {
      "name": "camel.component.ssh.sleep-for-shell-prompt",
      "type": "java.lang.Long",
      "description": "Sets the sleep period in milliseconds to wait reading response from shell prompt. Defaults to 100 milliseconds.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": 100
    },
    {
      "name": "camel.component.ssh.timeout",
      "type": "java.lang.Long",
      "description": "Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration",
      "defaultValue": 30000
    },
    {
      "name": "camel.component.ssh.username",
      "type": "java.lang.String",
      "description": "Sets the username to use in logging into the remote SSH server.",
      "sourceType": "org.apache.camel.component.ssh.springboot.SshComponentConfiguration"
    }
  ],
  "hints": []
}