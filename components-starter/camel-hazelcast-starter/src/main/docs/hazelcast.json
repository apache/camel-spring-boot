{
  "groups": [
    {
      "name": "camel.component.hazelcast-atomicvalue",
      "type": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-atomicvalue.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-instance",
      "type": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-instance.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-list",
      "type": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-list.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-map",
      "type": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-map.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-multimap",
      "type": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-multimap.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-queue",
      "type": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-queue.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-replicatedmap",
      "type": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-ringbuffer",
      "type": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-seda",
      "type": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-seda.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-set",
      "type": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-set.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.component.hazelcast-topic",
      "type": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-topic.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.hazelcast-atomicvalue.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-atomicvalue.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-atomicvalue.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-atomicvalue component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-atomicvalue.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-atomicvalue.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-atomicvalue.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.atomicnumber.springboot.HazelcastAtomicnumberComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-instance.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-instance.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-instance.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-instance.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-instance component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-instance.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-instance.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.instance.springboot.HazelcastInstanceComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-list.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-list.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-list.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-list.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-list component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-list.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-list.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-list.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.list.springboot.HazelcastListComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-map.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-map.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-map.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-map.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-map component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-map.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-map.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-map.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.map.springboot.HazelcastMapComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-multimap.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-multimap.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-multimap.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-multimap.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-multimap component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-multimap.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-multimap.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-multimap.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.multimap.springboot.HazelcastMultimapComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-queue.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-queue.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-queue.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-queue.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-queue component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-queue.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-queue.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-queue.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.queue.springboot.HazelcastQueueComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-replicatedmap component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-replicatedmap.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.replicatedmap.springboot.HazelcastReplicatedmapComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-ringbuffer component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-ringbuffer.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.ringbuffer.springboot.HazelcastRingbufferComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-seda.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-seda.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-seda.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-seda.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-seda component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-seda.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-seda.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-seda.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.seda.springboot.HazelcastSedaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-set.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-set.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-set.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-set.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-set component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-set.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-set.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-set.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.set.springboot.HazelcastSetComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-topic.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.hazelcast-topic.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.hazelcast-topic.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.hazelcast-topic.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the hazelcast-topic component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-topic.hazelcast-instance",
      "type": "com.hazelcast.core.HazelcastInstance",
      "description": "The hazelcast instance reference which can be used for hazelcast endpoint. If you don't specify the instance reference, camel use the default hazelcast instance from the camel-hazelcast instance. The option is a com.hazelcast.core.HazelcastInstance type.",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration"
    },
    {
      "name": "camel.component.hazelcast-topic.hazelcast-mode",
      "type": "java.lang.String",
      "description": "The hazelcast mode reference which kind of instance should be used. If you don't specify the mode, then the node mode will be the default.",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration",
      "defaultValue": "node"
    },
    {
      "name": "camel.component.hazelcast-topic.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.hazelcast.topic.springboot.HazelcastTopicComponentConfiguration",
      "defaultValue": false
    }
  ],
  "hints": []
}