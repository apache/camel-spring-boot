{
  "groups": [
    {
      "name": "camel.component.platform-http",
      "type": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration"
    },
    {
      "name": "camel.component.platform-http.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.platform-http.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.platform-http.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions (if possible) occurred while the Camel consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. Important: This is only possible if the 3rd party component allows Camel to be alerted if an exception was thrown. Some components handle this internally only, and therefore bridgeErrorHandler is not possible. In other situations we may improve the Camel component to hook into the 3rd party component and make this possible for future releases. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.platform-http.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.platform-http.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the platform-http component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration"
    },
    {
      "name": "camel.component.platform-http.engine",
      "type": "org.apache.camel.component.platform.http.spi.PlatformHttpEngine",
      "description": "An HTTP Server engine implementation to serve the requests. The option is a org.apache.camel.component.platform.http.spi.PlatformHttpEngine type.",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration"
    },
    {
      "name": "camel.component.platform-http.handle-write-response-error",
      "type": "java.lang.Boolean",
      "description": "When Camel is complete processing the message, and the HTTP server is writing response. This option controls whether Camel should catch any failure during writing response and store this on the Exchange, which allows onCompletion\/UnitOfWork to regard the Exchange as failed and have access to the caused exception from the HTTP server.",
      "sourceType": "org.apache.camel.component.platform.http.springboot.PlatformHttpComponentConfiguration",
      "defaultValue": false
    }
  ],
  "hints": []
}