{
  "groups": [
    {
      "name": "camel.dataformat.jaxb",
      "type": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.customizer",
      "type": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.dataformat.jaxb.content-type-header",
      "type": "java.lang.Boolean",
      "description": "Whether the data format should set the Content-Type header with the type from the data format. For example application\/xml for data formats marshalling to XML, or application\/json for data formats marshalling to JSON",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.dataformat.jaxb.context-path",
      "type": "java.lang.String",
      "description": "Package name where your JAXB classes are located.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.context-path-is-class-name",
      "type": "java.lang.Boolean",
      "description": "This can be set to true to mark that the contextPath is referring to a classname and not a package name.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.dataformat.jaxb.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the jaxb data format. This is enabled by default.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.encoding",
      "type": "java.lang.String",
      "description": "To overrule and use a specific encoding",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.filter-non-xml-chars",
      "type": "java.lang.Boolean",
      "description": "To ignore non xml characheters and replace them with an empty space.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.fragment",
      "type": "java.lang.Boolean",
      "description": "To turn on marshalling XML fragment trees. By default JAXB looks for XmlRootElement annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have XmlRootElement annotation, sometimes you need unmarshall only part of tree. In that case you can use partial unmarshalling. To enable this behaviours you need set property partClass. Camel will pass this class to JAXB's unmarshaler.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.ignore-j-a-x-b-element",
      "type": "java.lang.Boolean",
      "description": "Whether to ignore JAXBElement elements - only needed to be set to false in very special use-cases.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.jaxb-provider-properties",
      "type": "java.lang.String",
      "description": "Refers to a custom java.util.Map to lookup in the registry containing custom JAXB provider properties to be used with the JAXB marshaller.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.must-be-j-a-x-b-element",
      "type": "java.lang.Boolean",
      "description": "Whether marhsalling must be java objects with JAXB annotations. And if not then it fails. This option can be set to false to relax that, such as when the data is already in XML format.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.namespace-prefix-ref",
      "type": "java.lang.String",
      "description": "When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes, such as ns2, ns3, ns4 etc. To control this mapping, Camel allows you to refer to a map which contains the desired mapping.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.no-namespace-schema-location",
      "type": "java.lang.String",
      "description": "To define the location of the namespaceless schema",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.object-factory",
      "type": "java.lang.Boolean",
      "description": "Whether to allow using ObjectFactory classes to create the POJO classes during marshalling. This only applies to POJO classes that has not been annotated with JAXB and providing jaxb.index descriptor files.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.part-class",
      "type": "java.lang.String",
      "description": "Name of class used for fragment parsing. See more details at the fragment option.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.part-namespace",
      "type": "java.lang.String",
      "description": "XML namespace to use for fragment parsing. See more details at the fragment option.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.pretty-print",
      "type": "java.lang.Boolean",
      "description": "To enable pretty printing output nicely formatted. Is by default false.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.jaxb.schema",
      "type": "java.lang.String",
      "description": "To validate against an existing schema. Your can use the prefix classpath:, file: or http: to specify how the resource should by resolved. You can separate multiple schema files by using the ',' character.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.schema-location",
      "type": "java.lang.String",
      "description": "To define the location of the schema",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.jaxb.schema-severity-level",
      "type": "java.lang.Integer",
      "description": "Sets the schema severity level to use when validating against a schema. This level determines the minimum severity error that triggers JAXB to stop continue parsing. The default value of 0 (warning) means that any error (warning, error or fatal error) will trigger JAXB to stop. There are the following three levels: 0=warning, 1=error, 2=fatal error.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration",
      "defaultValue": 0
    },
    {
      "name": "camel.dataformat.jaxb.xml-stream-writer-wrapper",
      "type": "java.lang.String",
      "description": "To use a custom xml stream writer.",
      "sourceType": "org.apache.camel.converter.jaxb.springboot.JaxbDataFormatConfiguration"
    }
  ],
  "hints": []
}