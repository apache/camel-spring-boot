/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.infinispan.remote.springboot;

import java.util.Map;
import java.util.function.BiFunction;
import org.apache.camel.component.infinispan.InfinispanOperation;
import org.apache.camel.component.infinispan.InfinispanQueryBuilder;
import org.apache.camel.component.infinispan.remote.InfinispanRemoteComponent;
import org.apache.camel.component.infinispan.remote.InfinispanRemoteConfiguration;
import org.apache.camel.component.infinispan.remote.InfinispanRemoteCustomListener;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.infinispan.api.annotations.indexing.option.VectorSimilarity;
import org.infinispan.client.hotrod.RemoteCacheManager;
import org.infinispan.client.hotrod.configuration.Configuration;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Read and write from/to Infinispan distributed key/value store and data grid.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.component.infinispan")
public class InfinispanRemoteComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the infinispan component. This is
     * enabled by default.
     */
    private Boolean enabled;
    /**
     * Component configuration. The option is a
     * org.apache.camel.component.infinispan.remote.InfinispanRemoteConfiguration type.
     */
    private InfinispanRemoteConfiguration configuration;
    /**
     * Specifies the host of the cache on Infinispan instance. Multiple hosts
     * can be separated by semicolon.
     */
    private String hosts;
    /**
     * Specifies the query builder. The option is a
     * org.apache.camel.component.infinispan.InfinispanQueryBuilder type.
     */
    private InfinispanQueryBuilder queryBuilder;
    /**
     * Allows for bridging the consumer to the Camel routing Error Handler,
     * which mean any exceptions (if possible) occurred while the Camel consumer
     * is trying to pickup incoming messages, or the likes, will now be
     * processed as a message and handled by the routing Error Handler.
     * Important: This is only possible if the 3rd party component allows Camel
     * to be alerted if an exception was thrown. Some components handle this
     * internally only, and therefore bridgeErrorHandler is not possible. In
     * other situations we may improve the Camel component to hook into the 3rd
     * party component and make this possible for future releases. By default
     * the consumer will use the org.apache.camel.spi.ExceptionHandler to deal
     * with exceptions, that will be logged at WARN or ERROR level and ignored.
     */
    private Boolean bridgeErrorHandler = false;
    /**
     * Returns the custom listener in use, if provided. The option is a
     * org.apache.camel.component.infinispan.remote.InfinispanRemoteCustomListener type.
     */
    private InfinispanRemoteCustomListener customListener;
    /**
     * Specifies the set of event types to register by the consumer.Multiple
     * event can be separated by comma. The possible event types are:
     * CLIENT_CACHE_ENTRY_CREATED, CLIENT_CACHE_ENTRY_MODIFIED,
     * CLIENT_CACHE_ENTRY_REMOVED, CLIENT_CACHE_ENTRY_EXPIRED,
     * CLIENT_CACHE_FAILOVER
     */
    private String eventTypes;
    /**
     * Set a specific default value for some producer operations. The option is
     * a java.lang.Object type.
     */
    private Object defaultValue;
    /**
     * Set a specific key for producer operations. The option is a
     * java.lang.Object type.
     */
    private Object key;
    /**
     * Whether the producer should be started lazy (on the first message). By
     * starting lazy you can use this to allow CamelContext and routes to
     * startup in situations where a producer may otherwise fail during starting
     * and cause the route to fail being started. By deferring this startup to
     * be lazy then the startup failure can be handled during routing messages
     * via Camel's routing error handlers. Beware that when the first message is
     * processed then creating and starting the producer may take a little time
     * and prolong the total processing time of the processing.
     */
    private Boolean lazyStartProducer = false;
    /**
     * Set a specific old value for some producer operations. The option is a
     * java.lang.Object type.
     */
    private Object oldValue;
    /**
     * The operation to perform
     */
    private InfinispanOperation operation = InfinispanOperation.PUT;
    /**
     * Set a specific value for producer operations. The option is a
     * java.lang.Object type.
     */
    private Object value;
    /**
     * The dimension size used to store vector embeddings. This should be equal
     * to the dimension size of the model used to create the vector embeddings.
     * This option is mandatory if the embedding store is enabled.
     */
    private Integer embeddingStoreDimension;
    /**
     * The distance to use for kNN search queries in relation to the configured
     * vector similarity.
     */
    private Integer embeddingStoreDistance = 3;
    /**
     * Whether to enable the embedding store. When enabled, the embedding store
     * will be configured automatically when Camel starts. Note that this
     * feature requires camel-langchain4j-embeddings to be on the classpath.
     */
    private Boolean embeddingStoreEnabled = true;
    /**
     * Whether to automatically register the proto schema for the types required
     * by embedding store cache put and query operations.
     */
    private Boolean embeddingStoreRegisterSchema = true;
    /**
     * The name of the type used to store embeddings. The default is
     * 'InfinispanRemoteEmbedding' suffixed with the value of the
     * embeddingStoreDimension option. E.g. CamelInfinispanRemoteEmbedding384.
     */
    private String embeddingStoreTypeName;
    /**
     * The vector similarity algorithm used to store embeddings.
     */
    private VectorSimilarity embeddingStoreVectorSimilarity = VectorSimilarity.COSINE;
    /**
     * Whether autowiring is enabled. This is used for automatic autowiring
     * options (the option must be marked as autowired) by looking up in the
     * registry to find if there is a single instance of matching type, which
     * then gets configured on the component. This can be used for automatic
     * configuring JDBC data sources, JMS connection factories, AWS Clients,
     * etc.
     */
    private Boolean autowiredEnabled = true;
    /**
     * Specifies the cache Container to connect. The option is a
     * org.infinispan.client.hotrod.RemoteCacheManager type.
     */
    private RemoteCacheManager cacheContainer;
    /**
     * The CacheContainer configuration. Used if the cacheContainer is not
     * defined. The option is a
     * org.infinispan.client.hotrod.configuration.Configuration type.
     */
    private Configuration cacheContainerConfiguration;
    /**
     * Implementation specific properties for the CacheManager
     */
    private Map<String, String> configurationProperties;
    /**
     * An implementation specific URI for the CacheManager
     */
    private String configurationUri;
    /**
     * A comma separated list of org.infinispan.client.hotrod.Flag to be applied
     * by default on each cache invocation.
     */
    private String flags;
    /**
     * Set a specific remappingFunction to use in a compute operation. The
     * option is a java.util.function.BiFunction type.
     */
    private BiFunction remappingFunction;
    /**
     * Store the operation result in a header instead of the message body. By
     * default, resultHeader == null and the query result is stored in the
     * message body, any existing content in the message body is discarded. If
     * resultHeader is set, the value is used as the name of the header to store
     * the query result and the original message body is preserved. This value
     * can be overridden by an in message header named:
     * CamelInfinispanOperationResultHeader
     */
    private String resultHeader;
    /**
     * Define the password to access the infinispan instance
     */
    private String password;
    /**
     * Define the SASL Mechanism to access the infinispan instance
     */
    private String saslMechanism;
    /**
     * Define if we are connecting to a secured Infinispan instance
     */
    private Boolean secure = false;
    /**
     * Define the security realm to access the infinispan instance
     */
    private String securityRealm;
    /**
     * Define the security server name to access the infinispan instance
     */
    private String securityServerName;
    /**
     * Define the username to access the infinispan instance
     */
    private String username;

    public InfinispanRemoteConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(InfinispanRemoteConfiguration configuration) {
        this.configuration = configuration;
    }

    public String getHosts() {
        return hosts;
    }

    public void setHosts(String hosts) {
        this.hosts = hosts;
    }

    public InfinispanQueryBuilder getQueryBuilder() {
        return queryBuilder;
    }

    public void setQueryBuilder(InfinispanQueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    public Boolean getBridgeErrorHandler() {
        return bridgeErrorHandler;
    }

    public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
        this.bridgeErrorHandler = bridgeErrorHandler;
    }

    public InfinispanRemoteCustomListener getCustomListener() {
        return customListener;
    }

    public void setCustomListener(InfinispanRemoteCustomListener customListener) {
        this.customListener = customListener;
    }

    public String getEventTypes() {
        return eventTypes;
    }

    public void setEventTypes(String eventTypes) {
        this.eventTypes = eventTypes;
    }

    public Object getDefaultValue() {
        return defaultValue;
    }

    public void setDefaultValue(Object defaultValue) {
        this.defaultValue = defaultValue;
    }

    public Object getKey() {
        return key;
    }

    public void setKey(Object key) {
        this.key = key;
    }

    public Boolean getLazyStartProducer() {
        return lazyStartProducer;
    }

    public void setLazyStartProducer(Boolean lazyStartProducer) {
        this.lazyStartProducer = lazyStartProducer;
    }

    public Object getOldValue() {
        return oldValue;
    }

    public void setOldValue(Object oldValue) {
        this.oldValue = oldValue;
    }

    public InfinispanOperation getOperation() {
        return operation;
    }

    public void setOperation(InfinispanOperation operation) {
        this.operation = operation;
    }

    public Object getValue() {
        return value;
    }

    public void setValue(Object value) {
        this.value = value;
    }

    public Integer getEmbeddingStoreDimension() {
        return embeddingStoreDimension;
    }

    public void setEmbeddingStoreDimension(Integer embeddingStoreDimension) {
        this.embeddingStoreDimension = embeddingStoreDimension;
    }

    public Integer getEmbeddingStoreDistance() {
        return embeddingStoreDistance;
    }

    public void setEmbeddingStoreDistance(Integer embeddingStoreDistance) {
        this.embeddingStoreDistance = embeddingStoreDistance;
    }

    public Boolean getEmbeddingStoreEnabled() {
        return embeddingStoreEnabled;
    }

    public void setEmbeddingStoreEnabled(Boolean embeddingStoreEnabled) {
        this.embeddingStoreEnabled = embeddingStoreEnabled;
    }

    public Boolean getEmbeddingStoreRegisterSchema() {
        return embeddingStoreRegisterSchema;
    }

    public void setEmbeddingStoreRegisterSchema(
            Boolean embeddingStoreRegisterSchema) {
        this.embeddingStoreRegisterSchema = embeddingStoreRegisterSchema;
    }

    public String getEmbeddingStoreTypeName() {
        return embeddingStoreTypeName;
    }

    public void setEmbeddingStoreTypeName(String embeddingStoreTypeName) {
        this.embeddingStoreTypeName = embeddingStoreTypeName;
    }

    public VectorSimilarity getEmbeddingStoreVectorSimilarity() {
        return embeddingStoreVectorSimilarity;
    }

    public void setEmbeddingStoreVectorSimilarity(
            VectorSimilarity embeddingStoreVectorSimilarity) {
        this.embeddingStoreVectorSimilarity = embeddingStoreVectorSimilarity;
    }

    public Boolean getAutowiredEnabled() {
        return autowiredEnabled;
    }

    public void setAutowiredEnabled(Boolean autowiredEnabled) {
        this.autowiredEnabled = autowiredEnabled;
    }

    public RemoteCacheManager getCacheContainer() {
        return cacheContainer;
    }

    public void setCacheContainer(RemoteCacheManager cacheContainer) {
        this.cacheContainer = cacheContainer;
    }

    public Configuration getCacheContainerConfiguration() {
        return cacheContainerConfiguration;
    }

    public void setCacheContainerConfiguration(
            Configuration cacheContainerConfiguration) {
        this.cacheContainerConfiguration = cacheContainerConfiguration;
    }

    public Map<String, String> getConfigurationProperties() {
        return configurationProperties;
    }

    public void setConfigurationProperties(
            Map<String, String> configurationProperties) {
        this.configurationProperties = configurationProperties;
    }

    public String getConfigurationUri() {
        return configurationUri;
    }

    public void setConfigurationUri(String configurationUri) {
        this.configurationUri = configurationUri;
    }

    public String getFlags() {
        return flags;
    }

    public void setFlags(String flags) {
        this.flags = flags;
    }

    public BiFunction getRemappingFunction() {
        return remappingFunction;
    }

    public void setRemappingFunction(BiFunction remappingFunction) {
        this.remappingFunction = remappingFunction;
    }

    public String getResultHeader() {
        return resultHeader;
    }

    public void setResultHeader(String resultHeader) {
        this.resultHeader = resultHeader;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getSaslMechanism() {
        return saslMechanism;
    }

    public void setSaslMechanism(String saslMechanism) {
        this.saslMechanism = saslMechanism;
    }

    public Boolean getSecure() {
        return secure;
    }

    public void setSecure(Boolean secure) {
        this.secure = secure;
    }

    public String getSecurityRealm() {
        return securityRealm;
    }

    public void setSecurityRealm(String securityRealm) {
        this.securityRealm = securityRealm;
    }

    public String getSecurityServerName() {
        return securityServerName;
    }

    public void setSecurityServerName(String securityServerName) {
        this.securityServerName = securityServerName;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}