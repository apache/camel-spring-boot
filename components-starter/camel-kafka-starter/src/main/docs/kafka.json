{
  "groups": [
    {
      "name": "camel.component.kafka",
      "type": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.kafka.additional-properties",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http:\/\/localhost:8811\/avro",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.allow-manual-commit",
      "type": "java.lang.Boolean",
      "description": "Whether to allow doing manual commits via KafkaManualCommit. If this option is enabled then an instance of KafkaManualCommit is stored on the Exchange message header, which allows end users to access this API and perform manual offset commits via the Kafka consumer.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.auto-commit-enable",
      "type": "java.lang.Boolean",
      "description": "If true, periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.kafka.auto-commit-interval-ms",
      "type": "java.lang.Integer",
      "description": "The frequency in ms that the consumer offsets are committed to zookeeper.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.kafka.auto-offset-reset",
      "type": "java.lang.String",
      "description": "What to do when there is no initial offset in ZooKeeper or if an offset is out of range: earliest : automatically reset the offset to the earliest offset latest : automatically reset the offset to the latest offset fail: throw exception to the consumer",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "latest"
    },
    {
      "name": "camel.component.kafka.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.kafka.batch-with-individual-headers",
      "type": "java.lang.Boolean",
      "description": "If this feature is enabled and a single element of a batch is an Exchange or Message, the producer will generate individual kafka header values for it by using the batch Message to determine the values. Normal behaviour consists in always using the same header values (which are determined by the parent Exchange which contains the Iterable or Iterator).",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.break-on-first-error",
      "type": "java.lang.Boolean",
      "description": "This options controls what happens when a consumer is processing an exchange and it fails. If the option is false then the consumer continues to the next message and processes it. If the option is true then the consumer breaks out. Using the default NoopCommitManager will cause the consumer to not commit the offset so that the message is re-attempted. The consumer should use the KafkaManualCommit to determine the best way to handle the message. Using either the SynchCommitManager or the AsynchCommitManager the consumer will seek back to the offset of the message that caused a failure, and then re-attempt to process this message. However this can lead to endless processing of the same message if its bound to fail every time, eg a poison message. Therefore its recommended to deal with that for example by using Camel's error handler.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.brokers",
      "type": "java.lang.String",
      "description": "URL of the Kafka brokers to use. The format is host1:port1,host2:port2, and the list can be a subset of brokers or a VIP pointing to a subset of brokers. This option is known as bootstrap.servers in the Kafka documentation.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.buffer-memory-size",
      "type": "java.lang.Integer",
      "description": "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will either block or throw an exception based on the preference specified by block.on.buffer.full.This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 33554432
    },
    {
      "name": "camel.component.kafka.check-crcs",
      "type": "java.lang.Boolean",
      "description": "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.kafka.client-id",
      "type": "java.lang.String",
      "description": "The client id is a user-specified string sent in each request to help trace calls. It should logically identify the application making the request.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.commit-timeout-ms",
      "type": "java.lang.Long",
      "description": "The maximum time, in milliseconds, that the code will wait for a synchronous commit to complete. The option is a java.lang.Long type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.kafka.compression-codec",
      "type": "java.lang.String",
      "description": "This parameter allows you to specify the compression codec for all data generated by this producer. Valid values are none, gzip, snappy, lz4 and zstd.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "none"
    },
    {
      "name": "camel.component.kafka.configuration",
      "type": "org.apache.camel.component.kafka.KafkaConfiguration",
      "description": "Allows to pre-configure the Kafka component with common options that the endpoints will reuse. The option is a org.apache.camel.component.kafka.KafkaConfiguration type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.connection-max-idle-ms",
      "type": "java.lang.Integer",
      "description": "Close idle connections after the number of milliseconds specified by this config.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 540000
    },
    {
      "name": "camel.component.kafka.consumer-request-timeout-ms",
      "type": "java.lang.Integer",
      "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 40000
    },
    {
      "name": "camel.component.kafka.consumers-count",
      "type": "java.lang.Integer",
      "description": "The number of consumers that connect to kafka server. Each consumer is run on a separate thread, that retrieves and process the incoming data.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 1
    },
    {
      "name": "camel.component.kafka.create-consumer-backoff-interval",
      "type": "java.lang.Long",
      "description": "The delay in millis seconds to wait before trying again to create the kafka consumer (kafka-client).",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.kafka.create-consumer-backoff-max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum attempts to create the kafka consumer (kafka-client), before eventually giving up and failing. Error during creating the consumer may be fatal due to invalid configuration and as such recovery is not possible. However, one part of the validation is DNS resolution of the bootstrap broker hostnames. This may be a temporary networking problem, and could potentially be recoverable. While other errors are fatal such as some invalid kafka configurations. Unfortunately kafka-client does not separate this kind of errors. Camel will by default retry forever, and therefore never give up. If you want to give up after many attempts then set this option and Camel will then when giving up terminate the consumer. You can manually restart the consumer by stopping and starting the route, to try again.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.kafka.delivery-timeout-ms",
      "type": "java.lang.Integer",
      "description": "An upper bound on the time to report success or failure after a call to send() returns. This limits the total time that a record will be delayed prior to sending, the time to await acknowledgement from the broker (if expected), and the time allowed for retriable send failures.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 120000
    },
    {
      "name": "camel.component.kafka.enable-idempotence",
      "type": "java.lang.Boolean",
      "description": "When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream. If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires max.in.flight.requests.per.connection to be less than or equal to 5 (with message ordering preserved for any allowable value), retries to be greater than 0, and acks must be 'all'. Idempotence is enabled by default if no conflicting configurations are set. If conflicting configurations are set and idempotence is not explicitly enabled, idempotence is disabled. If idempotence is explicitly enabled and conflicting configurations are set, a ConfigException is thrown.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.kafka.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the kafka component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.fetch-max-bytes",
      "type": "java.lang.Integer",
      "description": "The maximum amount of data the server should return for a fetch request This is not an absolute maximum, if the first message in the first non-empty partition of the fetch is larger than this value, the message will still be returned to ensure that the consumer can make progress. The maximum message size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 52428800
    },
    {
      "name": "camel.component.kafka.fetch-min-bytes",
      "type": "java.lang.Integer",
      "description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 1
    },
    {
      "name": "camel.component.kafka.fetch-wait-max-ms",
      "type": "java.lang.Integer",
      "description": "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy fetch.min.bytes",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 500
    },
    {
      "name": "camel.component.kafka.group-id",
      "type": "java.lang.String",
      "description": "A string that uniquely identifies the group of consumer processes to which this consumer belongs. By setting the same group id multiple processes indicate that they are all part of the same consumer group. This option is required for consumers.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.group-instance-id",
      "type": "java.lang.String",
      "description": "A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.header-deserializer",
      "type": "org.apache.camel.component.kafka.serde.KafkaHeaderDeserializer",
      "description": "To use a custom KafkaHeaderDeserializer to deserialize kafka headers values. The option is a org.apache.camel.component.kafka.serde.KafkaHeaderDeserializer type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.header-filter-strategy",
      "type": "org.apache.camel.spi.HeaderFilterStrategy",
      "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message. The option is a org.apache.camel.spi.HeaderFilterStrategy type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.header-serializer",
      "type": "org.apache.camel.component.kafka.serde.KafkaHeaderSerializer",
      "description": "To use a custom KafkaHeaderSerializer to serialize kafka headers values. The option is a org.apache.camel.component.kafka.serde.KafkaHeaderSerializer type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.heartbeat-interval-ms",
      "type": "java.lang.Integer",
      "description": "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1\/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 3000
    },
    {
      "name": "camel.component.kafka.interceptor-classes",
      "type": "java.lang.String",
      "description": "Sets interceptors for producer or consumers. Producer interceptors have to be classes implementing org.apache.kafka.clients.producer.ProducerInterceptor Consumer interceptors have to be classes implementing org.apache.kafka.clients.consumer.ConsumerInterceptor Note that if you use Producer interceptor on a consumer it will throw a class cast exception in runtime",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.isolation-level",
      "type": "java.lang.String",
      "description": "Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. Messages will always be returned in offset order. Hence, in read_committed mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, read_committed consumers will not be able to read up to the high watermark when there are in flight transactions. Further, when in read_committed the seekToEnd method will return the LSO",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "read_uncommitted"
    },
    {
      "name": "camel.component.kafka.kafka-client-factory",
      "type": "org.apache.camel.component.kafka.KafkaClientFactory",
      "description": "Factory to use for creating org.apache.kafka.clients.consumer.KafkaConsumer and org.apache.kafka.clients.producer.KafkaProducer instances. This allows to configure a custom factory to create instances with logic that extends the vanilla Kafka clients. The option is a org.apache.camel.component.kafka.KafkaClientFactory type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.kafka-manual-commit-factory",
      "type": "org.apache.camel.component.kafka.consumer.KafkaManualCommitFactory",
      "description": "Factory to use for creating KafkaManualCommit instances. This allows to plugin a custom factory to create custom KafkaManualCommit instances in case special logic is needed when doing manual commits that deviates from the default implementation that comes out of the box. The option is a org.apache.camel.component.kafka.consumer.KafkaManualCommitFactory type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.kerberos-before-relogin-min-time",
      "type": "java.lang.Integer",
      "description": "Login thread sleep time between refresh attempts.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 60000
    },
    {
      "name": "camel.component.kafka.kerberos-init-cmd",
      "type": "java.lang.String",
      "description": "Kerberos kinit command path. Default is \/usr\/bin\/kinit",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "\/usr\/bin\/kinit"
    },
    {
      "name": "camel.component.kafka.kerberos-principal-to-local-rules",
      "type": "java.lang.String",
      "description": "A list of rules for mapping from principal names to short names (typically operating system usernames). The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default, principal names of the form {username}\/{hostname}{REALM} are mapped to {username}. For more details on the format please see the security authorization and acls documentation (at the Apache Kafka project). Multiple values can be separated by comma",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "DEFAULT"
    },
    {
      "name": "camel.component.kafka.kerberos-renew-jitter",
      "type": "java.lang.Double",
      "description": "Percentage of random jitter added to the renewal time.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.kerberos-renew-window-factor",
      "type": "java.lang.Double",
      "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.key",
      "type": "java.lang.String",
      "description": "The record key (or null if no key is specified). If this option has been configured then it take precedence over header KafkaConstants#KEY",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.key-deserializer",
      "type": "java.lang.String",
      "description": "Deserializer class for key that implements the Deserializer interface.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "org.apache.kafka.common.serialization.StringDeserializer"
    },
    {
      "name": "camel.component.kafka.key-serializer",
      "type": "java.lang.String",
      "description": "The serializer class for keys (defaults to the same as for messages if nothing is given).",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "org.apache.kafka.common.serialization.StringSerializer"
    },
    {
      "name": "camel.component.kafka.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.linger-ms",
      "type": "java.lang.Integer",
      "description": "The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 0
    },
    {
      "name": "camel.component.kafka.max-block-ms",
      "type": "java.lang.Integer",
      "description": "The configuration controls how long the KafkaProducer's send(), partitionsFor(), initTransactions(), sendOffsetsToTransaction(), commitTransaction() and abortTransaction() methods will block. For send() this timeout bounds the total time waiting for both metadata fetch and buffer allocation (blocking in the user-supplied serializers or partitioner is not counted against this timeout). For partitionsFor() this timeout bounds the time spent waiting for metadata if it is unavailable. The transaction-related methods always block, but may timeout if the transaction coordinator could not be discovered or did not respond within the timeout.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 60000
    },
    {
      "name": "camel.component.kafka.max-in-flight-request",
      "type": "java.lang.Integer",
      "description": "The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 5
    },
    {
      "name": "camel.component.kafka.max-partition-fetch-bytes",
      "type": "java.lang.Integer",
      "description": "The maximum amount of data per-partition the server will return. The maximum total memory used for a request will be #partitions max.partition.fetch.bytes. This size must be at least as large as the maximum message size the server allows or else it is possible for the producer to send messages larger than the consumer can fetch. If that happens, the consumer can get stuck trying to fetch a large message on a certain partition.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 1048576
    },
    {
      "name": "camel.component.kafka.max-poll-interval-ms",
      "type": "java.lang.Long",
      "description": "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. The option is a java.lang.Long type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.max-poll-records",
      "type": "java.lang.Integer",
      "description": "The maximum number of records returned in a single call to poll()",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 500
    },
    {
      "name": "camel.component.kafka.max-request-size",
      "type": "java.lang.Integer",
      "description": "The maximum size of a request. This is also effectively a cap on the maximum record size. Note that the server has its own cap on record size which may be different from this. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 1048576
    },
    {
      "name": "camel.component.kafka.metadata-max-age-ms",
      "type": "java.lang.Integer",
      "description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 300000
    },
    {
      "name": "camel.component.kafka.metric-reporters",
      "type": "java.lang.String",
      "description": "A list of classes to use as metrics reporters. Implementing the MetricReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.metrics-sample-window-ms",
      "type": "java.lang.Integer",
      "description": "The window of time a metrics sample is computed over.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 30000
    },
    {
      "name": "camel.component.kafka.no-of-metrics-sample",
      "type": "java.lang.Integer",
      "description": "The number of samples maintained to compute metrics.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 2
    },
    {
      "name": "camel.component.kafka.offset-repository",
      "type": "org.apache.camel.spi.StateRepository<java.lang.String,java.lang.String>",
      "description": "The offset repository to use in order to locally store the offset of each partition of the topic. Defining one will disable the autocommit. The option is a org.apache.camel.spi.StateRepository<java.lang.String, java.lang.String> type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.partition-assignor",
      "type": "java.lang.String",
      "description": "The class name of the partition assignment strategy that the client will use to distribute partition ownership amongst consumer instances when group management is used",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "org.apache.kafka.clients.consumer.RangeAssignor"
    },
    {
      "name": "camel.component.kafka.partition-key",
      "type": "java.lang.Integer",
      "description": "The partition to which the record will be sent (or null if no partition was specified). If this option has been configured then it take precedence over header KafkaConstants#PARTITION_KEY",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.partitioner",
      "type": "java.lang.String",
      "description": "The partitioner class for partitioning messages amongst sub-topics. The default partitioner is based on the hash of the key.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "org.apache.kafka.clients.producer.internals.DefaultPartitioner"
    },
    {
      "name": "camel.component.kafka.poll-exception-strategy",
      "type": "org.apache.camel.component.kafka.PollExceptionStrategy",
      "description": "To use a custom strategy with the consumer to control how to handle exceptions thrown from the Kafka broker while pooling messages. The option is a org.apache.camel.component.kafka.PollExceptionStrategy type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.poll-on-error",
      "type": "org.apache.camel.component.kafka.PollOnError",
      "description": "What to do if kafka threw an exception while polling for new messages. Will by default use the value from the component configuration unless an explicit value has been configured on the endpoint level. DISCARD will discard the message and continue to poll next message. ERROR_HANDLER will use Camel's error handler to process the exception, and afterwards continue to poll next message. RECONNECT will re-connect the consumer and try poll the message again RETRY will let the consumer retry polling the same message again STOP will stop the consumer (have to be manually started\/restarted if the consumer should be able to consume messages again)",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.poll-timeout-ms",
      "type": "java.lang.Long",
      "description": "The timeout used when polling the KafkaConsumer. The option is a java.lang.Long type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.kafka.producer-batch-size",
      "type": "java.lang.Integer",
      "description": "The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size.Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent.A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 16384
    },
    {
      "name": "camel.component.kafka.queue-buffering-max-messages",
      "type": "java.lang.Integer",
      "description": "The maximum number of unsent messages that can be queued up the producer when using async mode before either the producer must be blocked or data must be dropped.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 10000
    },
    {
      "name": "camel.component.kafka.receive-buffer-bytes",
      "type": "java.lang.Integer",
      "description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 65536
    },
    {
      "name": "camel.component.kafka.reconnect-backoff-max-ms",
      "type": "java.lang.Integer",
      "description": "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 1000
    },
    {
      "name": "camel.component.kafka.reconnect-backoff-ms",
      "type": "java.lang.Integer",
      "description": "The amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all requests sent by the consumer to the broker.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 50
    },
    {
      "name": "camel.component.kafka.record-metadata",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should store the RecordMetadata results from sending to Kafka. The results are stored in a List containing the RecordMetadata metadata's. The list is stored on a header with the key KafkaConstants#KAFKA_RECORDMETA",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.kafka.request-required-acks",
      "type": "java.lang.String",
      "description": "The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are allowed: acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting. Note that enabling idempotence requires this config value to be 'all'. If conflicting configurations are set and idempotence is not explicitly enabled, idempotence is disabled.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "all"
    },
    {
      "name": "camel.component.kafka.request-timeout-ms",
      "type": "java.lang.Integer",
      "description": "The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 30000
    },
    {
      "name": "camel.component.kafka.retries",
      "type": "java.lang.Integer",
      "description": "Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Produce requests will be failed before the number of retries has been exhausted if the timeout configured by delivery.timeout.ms expires first before successful acknowledgement. Users should generally prefer to leave this config unset and instead use delivery.timeout.ms to control retry behavior. Enabling idempotence requires this config value to be greater than 0. If conflicting configurations are set and idempotence is not explicitly enabled, idempotence is disabled. Allowing retries while setting enable.idempotence to false and max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.retry-backoff-ms",
      "type": "java.lang.Integer",
      "description": "Before each retry, the producer refreshes the metadata of relevant topics to see if a new leader has been elected. Since leader election takes a bit of time, this property specifies the amount of time that the producer waits before refreshing the metadata.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 100
    },
    {
      "name": "camel.component.kafka.sasl-jaas-config",
      "type": "java.lang.String",
      "description": "Expose the kafka sasl.jaas.config parameter Example: org.apache.kafka.common.security.plain.PlainLoginModule required username=USERNAME password=PASSWORD;",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.sasl-kerberos-service-name",
      "type": "java.lang.String",
      "description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.sasl-mechanism",
      "type": "java.lang.String",
      "description": "The Simple Authentication and Security Layer (SASL) Mechanism used. For the valid values see http:\/\/www.iana.org\/assignments\/sasl-mechanisms\/sasl-mechanisms.xhtml",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "GSSAPI"
    },
    {
      "name": "camel.component.kafka.schema-registry-u-r-l",
      "type": "java.lang.String",
      "description": "URL of the Confluent Platform schema registry servers to use. The format is host1:port1,host2:port2. This is known as schema.registry.url in the Confluent Platform documentation. This option is only available in the Confluent Platform (not standard Apache Kafka)",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.security-protocol",
      "type": "java.lang.String",
      "description": "Protocol used to communicate with brokers. SASL_PLAINTEXT, PLAINTEXT, SASL_SSL and SSL are supported",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "PLAINTEXT"
    },
    {
      "name": "camel.component.kafka.seek-to",
      "type": "org.apache.camel.component.kafka.SeekPolicy",
      "description": "Set if KafkaConsumer will read from beginning or end on startup: SeekPolicy.BEGINNING: read from beginning. SeekPolicy.END: read from end.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.send-buffer-bytes",
      "type": "java.lang.Integer",
      "description": "Socket write buffer size",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 131072
    },
    {
      "name": "camel.component.kafka.session-timeout-ms",
      "type": "java.lang.Integer",
      "description": "The timeout used to detect failures when using Kafka's group management facilities.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 10000
    },
    {
      "name": "camel.component.kafka.shutdown-timeout",
      "type": "java.lang.Integer",
      "description": "Timeout in milliseconds to wait gracefully for the consumer or producer to shutdown and terminate its worker threads.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 30000
    },
    {
      "name": "camel.component.kafka.specific-avro-reader",
      "type": "java.lang.Boolean",
      "description": "This enables the use of a specific Avro reader for use with the Confluent Platform schema registry and the io.confluent.kafka.serializers.KafkaAvroDeserializer. This option is only available in the Confluent Platform (not standard Apache Kafka)",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.ssl-cipher-suites",
      "type": "java.lang.String",
      "description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-context-parameters",
      "type": "org.apache.camel.support.jsse.SSLContextParameters",
      "description": "SSL configuration using a Camel SSLContextParameters object. If configured it's applied before the other SSL endpoint parameters. NOTE: Kafka only supports loading keystore from file locations, so prefix the location with file: in the KeyStoreParameters.resource option. The option is a org.apache.camel.support.jsse.SSLContextParameters type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-enabled-protocols",
      "type": "java.lang.String",
      "description": "The list of protocols enabled for SSL connections. The default is TLSv1.2,TLSv1.3 when running with Java 11 or newer, TLSv1.2 otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for SslProtocol.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-endpoint-algorithm",
      "type": "java.lang.String",
      "description": "The endpoint identification algorithm to validate server hostname using server certificate. Use none or false to disable server hostname verification.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "https"
    },
    {
      "name": "camel.component.kafka.ssl-key-password",
      "type": "java.lang.String",
      "description": "The password of the private key in the key store file or the PEM key specified in sslKeystoreKey. This is required for clients only if two-way authentication is configured.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-keymanager-algorithm",
      "type": "java.lang.String",
      "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "SunX509"
    },
    {
      "name": "camel.component.kafka.ssl-keystore-location",
      "type": "java.lang.String",
      "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-keystore-password",
      "type": "java.lang.String",
      "description": "The store password for the key store file. This is optional for client and only needed if sslKeystoreLocation' is configured. Key store password is not supported for PEM format.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-keystore-type",
      "type": "java.lang.String",
      "description": "The file format of the key store file. This is optional for client. Default value is JKS",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "JKS"
    },
    {
      "name": "camel.component.kafka.ssl-protocol",
      "type": "java.lang.String",
      "description": "The SSL protocol used to generate the SSLContext. The default is TLSv1.3 when running with Java 11 or newer, TLSv1.2 otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are TLSv1.2 and TLSv1.3. TLS, TLSv1.1, SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and sslEnabledProtocols, clients will downgrade to TLSv1.2 if the server does not support TLSv1.3. If this config is set to TLSv1.2, clients will not use TLSv1.3 even if it is one of the values in sslEnabledProtocols and the server only supports TLSv1.3.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-provider",
      "type": "java.lang.String",
      "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-trustmanager-algorithm",
      "type": "java.lang.String",
      "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "PKIX"
    },
    {
      "name": "camel.component.kafka.ssl-truststore-location",
      "type": "java.lang.String",
      "description": "The location of the trust store file.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-truststore-password",
      "type": "java.lang.String",
      "description": "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.ssl-truststore-type",
      "type": "java.lang.String",
      "description": "The file format of the trust store file. Default value is JKS.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "JKS"
    },
    {
      "name": "camel.component.kafka.subscribe-consumer-backoff-interval",
      "type": "java.lang.Long",
      "description": "The delay in millis seconds to wait before trying again to subscribe to the kafka broker.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 5000
    },
    {
      "name": "camel.component.kafka.subscribe-consumer-backoff-max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number the kafka consumer will attempt to subscribe to the kafka broker, before eventually giving up and failing. Error during subscribing the consumer to the kafka topic could be temporary errors due to network issues, and could potentially be recoverable. Camel will by default retry forever, and therefore never give up. If you want to give up after many attempts then set this option and Camel will then when giving up terminate the consumer. You can manually restart the consumer by stopping and starting the route, to try again.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.synchronous",
      "type": "java.lang.Boolean",
      "description": "Sets whether synchronous processing should be strictly used",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.topic-is-pattern",
      "type": "java.lang.Boolean",
      "description": "Whether the topic is a pattern (regular expression). This can be used to subscribe to dynamic number of topics matching the pattern.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.use-global-ssl-context-parameters",
      "type": "java.lang.Boolean",
      "description": "Enable usage of global SSL context parameters.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.kafka.value-deserializer",
      "type": "java.lang.String",
      "description": "Deserializer class for value that implements the Deserializer interface.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "org.apache.kafka.common.serialization.StringDeserializer"
    },
    {
      "name": "camel.component.kafka.value-serializer",
      "type": "java.lang.String",
      "description": "The serializer class for messages.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": "org.apache.kafka.common.serialization.StringSerializer"
    },
    {
      "name": "camel.component.kafka.worker-pool",
      "type": "java.util.concurrent.ExecutorService",
      "description": "To use a custom worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing. If using this option then you must handle the lifecycle of the thread pool to shut the pool down when no longer needed. The option is a java.util.concurrent.ExecutorService type.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration"
    },
    {
      "name": "camel.component.kafka.worker-pool-core-size",
      "type": "java.lang.Integer",
      "description": "Number of core threads for the worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 10
    },
    {
      "name": "camel.component.kafka.worker-pool-max-size",
      "type": "java.lang.Integer",
      "description": "Maximum number of threads for the worker pool for continue routing Exchange after kafka server has acknowledge the message that was sent to it from KafkaProducer using asynchronous non-blocking processing.",
      "sourceType": "org.apache.camel.component.kafka.springboot.KafkaComponentConfiguration",
      "defaultValue": 20
    }
  ],
  "hints": []
}