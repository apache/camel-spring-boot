{
  "groups": [
    {
      "name": "camel.component.http",
      "type": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.http.allow-java-serialized-object",
      "type": "java.lang.Boolean",
      "description": "Whether to allow java serialization when a request uses context-type=application\/x-java-serialized-object. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.http.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.http.client-connection-manager",
      "type": "org.apache.http.conn.HttpClientConnectionManager",
      "description": "To use a custom and shared HttpClientConnectionManager to manage connections. If this has been configured then this is always used for all endpoints created by this component. The option is a org.apache.http.conn.HttpClientConnectionManager type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.connect-timeout",
      "type": "java.lang.Integer",
      "description": "Determines the timeout in milliseconds until a connection is established. A timeout value of zero is interpreted as an infinite timeout. A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default).",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": -1
    },
    {
      "name": "camel.component.http.connection-request-timeout",
      "type": "java.lang.Integer",
      "description": "The timeout in milliseconds used when requesting a connection from the connection manager. A timeout value of zero is interpreted as an infinite timeout. A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default).",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": -1
    },
    {
      "name": "camel.component.http.connection-time-to-live",
      "type": "java.lang.Long",
      "description": "The time for connection to live, the time unit is millisecond, the default value is always keep alive.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.connections-per-route",
      "type": "java.lang.Integer",
      "description": "The maximum number of connections per route.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": 20
    },
    {
      "name": "camel.component.http.cookie-store",
      "type": "org.apache.http.client.CookieStore",
      "description": "To use a custom org.apache.http.client.CookieStore. By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store. Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie shouldn't be stored as we are just bridging (eg acting as a proxy). The option is a org.apache.http.client.CookieStore type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.http.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the http component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.header-filter-strategy",
      "type": "org.apache.camel.spi.HeaderFilterStrategy",
      "description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message. The option is a org.apache.camel.spi.HeaderFilterStrategy type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.http-binding",
      "type": "org.apache.camel.http.common.HttpBinding",
      "description": "To use a custom HttpBinding to control the mapping between Camel message and HttpClient. The option is a org.apache.camel.http.common.HttpBinding type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.http-client-configurer",
      "type": "org.apache.camel.component.http.HttpClientConfigurer",
      "description": "To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used. The option is a org.apache.camel.component.http.HttpClientConfigurer type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.http-configuration",
      "type": "org.apache.camel.http.common.HttpConfiguration",
      "description": "To use the shared HttpConfiguration as base configuration. The option is a org.apache.camel.http.common.HttpConfiguration type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.http-context",
      "type": "org.apache.http.protocol.HttpContext",
      "description": "To use a custom org.apache.http.protocol.HttpContext when executing requests. The option is a org.apache.http.protocol.HttpContext type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.http.max-total-connections",
      "type": "java.lang.Integer",
      "description": "The maximum number of connections.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": 200
    },
    {
      "name": "camel.component.http.proxy-auth-domain",
      "type": "java.lang.String",
      "description": "Proxy authentication domain to use",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.proxy-auth-host",
      "type": "java.lang.String",
      "description": "Proxy authentication host",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.proxy-auth-method",
      "type": "java.lang.String",
      "description": "Proxy authentication method to use",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.proxy-auth-nt-host",
      "type": "java.lang.String",
      "description": "Proxy authentication domain (workstation name) to use with NTML",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.proxy-auth-password",
      "type": "java.lang.String",
      "description": "Proxy authentication password",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.proxy-auth-port",
      "type": "java.lang.Integer",
      "description": "Proxy authentication port",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.proxy-auth-username",
      "type": "java.lang.String",
      "description": "Proxy authentication username",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.socket-timeout",
      "type": "java.lang.Integer",
      "description": "Defines the socket timeout in milliseconds, which is the timeout for waiting for data or, put differently, a maximum period inactivity between two consecutive data packets). A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default).",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": -1
    },
    {
      "name": "camel.component.http.ssl-context-parameters",
      "type": "org.apache.camel.support.jsse.SSLContextParameters",
      "description": "To configure security using SSLContextParameters. Important: Only one instance of org.apache.camel.support.jsse.SSLContextParameters is supported per HttpComponent. If you need to use 2 or more different instances, you need to define a new HttpComponent per instance you need. The option is a org.apache.camel.support.jsse.SSLContextParameters type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    },
    {
      "name": "camel.component.http.use-global-ssl-context-parameters",
      "type": "java.lang.Boolean",
      "description": "Enable usage of global SSL context parameters.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.http.x509-hostname-verifier",
      "type": "javax.net.ssl.HostnameVerifier",
      "description": "To use a custom X509HostnameVerifier such as DefaultHostnameVerifier or NoopHostnameVerifier. The option is a javax.net.ssl.HostnameVerifier type.",
      "sourceType": "org.apache.camel.component.http.springboot.HttpComponentConfiguration"
    }
  ],
  "hints": []
}