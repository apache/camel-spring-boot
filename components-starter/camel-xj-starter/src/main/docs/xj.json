{
  "groups": [
    {
      "name": "camel.component.xj",
      "type": "org.apache.camel.component.xj.springboot.XJComponentConfiguration",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.xj.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.xj.content-cache",
      "type": "java.lang.Boolean",
      "description": "Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.xj.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.xj.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the xj component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.xj.saxon-configuration",
      "type": "net.sf.saxon.Configuration",
      "description": "To use a custom Saxon configuration. The option is a net.sf.saxon.Configuration type.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.saxon-configuration-properties",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "To set custom Saxon configuration properties",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.saxon-extension-functions",
      "type": "java.lang.String",
      "description": "Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add camel-saxon to the classpath. The function is looked up in the registry, where you can comma to separate multiple values to lookup.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.secure-processing",
      "type": "java.lang.Boolean",
      "description": "Feature for XML secure processing (see javax.xml.XMLConstants). This is enabled by default. However, when using Saxon Professional you may need to turn this off to allow Saxon to be able to use Java extension functions.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.xj.transformer-factory-class",
      "type": "java.lang.String",
      "description": "To use a custom XSLT transformer factory, specified as a FQN class name",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.transformer-factory-configuration-strategy",
      "type": "org.apache.camel.component.xslt.TransformerFactoryConfigurationStrategy",
      "description": "A configuration strategy to apply on freshly created instances of TransformerFactory. The option is a org.apache.camel.component.xslt.TransformerFactoryConfigurationStrategy type.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.uri-resolver",
      "type": "javax.xml.transform.URIResolver",
      "description": "To use a custom UriResolver. Should not be used together with the option 'uriResolverFactory'. The option is a javax.xml.transform.URIResolver type.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    },
    {
      "name": "camel.component.xj.uri-resolver-factory",
      "type": "org.apache.camel.component.xslt.XsltUriResolverFactory",
      "description": "To use a custom UriResolver which depends on a dynamic endpoint resource URI. Should not be used together with the option 'uriResolver'. The option is a org.apache.camel.component.xslt.XsltUriResolverFactory type.",
      "sourceType": "org.apache.camel.component.xj.springboot.XJComponentConfiguration"
    }
  ],
  "hints": []
}