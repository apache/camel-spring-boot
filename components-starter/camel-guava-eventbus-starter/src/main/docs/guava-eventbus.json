{
  "groups": [
    {
      "name": "camel.component.guava-eventbus",
      "type": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration"
    },
    {
      "name": "camel.component.guava-eventbus.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.guava-eventbus.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.guava-eventbus.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.guava-eventbus.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.guava-eventbus.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the guava-eventbus component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration"
    },
    {
      "name": "camel.component.guava-eventbus.event-bus",
      "type": "com.google.common.eventbus.EventBus",
      "description": "To use the given Guava EventBus instance. The option is a com.google.common.eventbus.EventBus type.",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration"
    },
    {
      "name": "camel.component.guava-eventbus.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.guava-eventbus.listener-interface",
      "type": "java.lang.Class<java.lang.Object>",
      "description": "The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option.",
      "sourceType": "org.apache.camel.component.guava.eventbus.springboot.GuavaEventBusComponentConfiguration"
    }
  ],
  "hints": []
}