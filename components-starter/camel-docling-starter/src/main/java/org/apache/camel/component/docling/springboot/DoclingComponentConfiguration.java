/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.docling.springboot;

import org.apache.camel.component.docling.AuthenticationScheme;
import org.apache.camel.component.docling.DoclingComponent;
import org.apache.camel.component.docling.DoclingConfiguration;
import org.apache.camel.component.docling.DoclingOperations;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Process documents using Docling library for parsing and conversion.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.component.docling")
public class DoclingComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the docling component. This is
     * enabled by default.
     */
    private Boolean enabled;
    /**
     * The configuration for the Docling Endpoint. The option is a
     * org.apache.camel.component.docling.DoclingConfiguration type.
     */
    private DoclingConfiguration configuration;
    /**
     * Include the content of the output file in the exchange body and delete
     * the output file
     */
    private Boolean contentInBody = false;
    /**
     * Docling-serve API URL (e.g., http://localhost:5001)
     */
    private String doclingServeUrl = "http://localhost:5001";
    /**
     * Enable OCR processing for scanned documents
     */
    private Boolean enableOCR = true;
    /**
     * Show layout information with bounding boxes
     */
    private Boolean includeLayoutInfo = false;
    /**
     * Whether the producer should be started lazy (on the first message). By
     * starting lazy you can use this to allow CamelContext and routes to
     * startup in situations where a producer may otherwise fail during starting
     * and cause the route to fail being started. By deferring this startup to
     * be lazy then the startup failure can be handled during routing messages
     * via Camel's routing error handlers. Beware that when the first message is
     * processed then creating and starting the producer may take a little time
     * and prolong the total processing time of the processing.
     */
    private Boolean lazyStartProducer = false;
    /**
     * Language code for OCR processing
     */
    private String ocrLanguage = "en";
    /**
     * The operation to perform
     */
    private DoclingOperations operation = DoclingOperations.CONVERT_TO_MARKDOWN;
    /**
     * Output format for document conversion
     */
    private String outputFormat = "markdown";
    /**
     * Use docling-serve API instead of CLI command
     */
    private Boolean useDoclingServe = false;
    /**
     * API request timeout in milliseconds
     */
    private Long apiTimeout = 60000L;
    /**
     * Polling interval for async conversion status in milliseconds
     */
    private Long asyncPollInterval = 2000L;
    /**
     * Maximum time to wait for async conversion completion in milliseconds
     */
    private Long asyncTimeout = 300000L;
    /**
     * Whether autowiring is enabled. This is used for automatic autowiring
     * options (the option must be marked as autowired) by looking up in the
     * registry to find if there is a single instance of matching type, which
     * then gets configured on the component. This can be used for automatic
     * configuring JDBC data sources, JMS connection factories, AWS Clients,
     * etc.
     */
    private Boolean autowiredEnabled = true;
    /**
     * Connection request timeout in milliseconds (timeout when requesting
     * connection from pool)
     */
    private Integer connectionRequestTimeout = 30000;
    /**
     * Connection timeout in milliseconds
     */
    private Integer connectionTimeout = 30000;
    /**
     * Time to live for connections in milliseconds (-1 for infinite)
     */
    private Long connectionTimeToLive = -1L;
    /**
     * Docling-serve API convert endpoint path
     */
    private String convertEndpoint = "/v1/convert/source";
    /**
     * Path to Docling Python executable or command
     */
    private String doclingCommand;
    /**
     * Enable eviction of idle connections from the pool
     */
    private Boolean evictIdleConnections = true;
    /**
     * Maximum connections per route in the connection pool
     */
    private Integer maxConnectionsPerRoute = 10;
    /**
     * Maximum idle time for connections in milliseconds before eviction
     */
    private Long maxIdleTime = 60000L;
    /**
     * Maximum total connections in the connection pool
     */
    private Integer maxTotalConnections = 20;
    /**
     * Timeout for Docling process execution in milliseconds
     */
    private Long processTimeout = 30000L;
    /**
     * Socket timeout in milliseconds
     */
    private Integer socketTimeout = 60000;
    /**
     * Use asynchronous conversion mode (docling-serve API only)
     */
    private Boolean useAsyncMode = false;
    /**
     * Validate connections after inactivity in milliseconds
     */
    private Integer validateAfterInactivity = 2000;
    /**
     * Working directory for Docling execution
     */
    private String workingDirectory;
    /**
     * Fail entire batch on first error (true) or continue processing remaining
     * documents (false)
     */
    private Boolean batchFailOnFirstError = true;
    /**
     * Number of parallel threads for batch processing
     */
    private Integer batchParallelism = 4;
    /**
     * Maximum number of documents to process in a single batch (batch
     * operations only)
     */
    private Integer batchSize = 10;
    /**
     * Maximum time to wait for batch completion in milliseconds
     */
    private Long batchTimeout = 300000L;
    /**
     * Split batch results into individual exchanges (one per document) instead
     * of single BatchProcessingResults
     */
    private Boolean splitBatchResults = false;
    /**
     * Header name for API key authentication
     */
    private String apiKeyHeader = "X-API-Key";
    /**
     * Authentication scheme (BEARER, API_KEY, NONE)
     */
    private AuthenticationScheme authenticationScheme = AuthenticationScheme.NONE;
    /**
     * Authentication token for docling-serve API (Bearer token or API key)
     */
    private String authenticationToken;
    /**
     * Maximum file size in bytes for processing
     */
    private Long maxFileSize = 52428800L;

    public DoclingConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(DoclingConfiguration configuration) {
        this.configuration = configuration;
    }

    public Boolean getContentInBody() {
        return contentInBody;
    }

    public void setContentInBody(Boolean contentInBody) {
        this.contentInBody = contentInBody;
    }

    public String getDoclingServeUrl() {
        return doclingServeUrl;
    }

    public void setDoclingServeUrl(String doclingServeUrl) {
        this.doclingServeUrl = doclingServeUrl;
    }

    public Boolean getEnableOCR() {
        return enableOCR;
    }

    public void setEnableOCR(Boolean enableOCR) {
        this.enableOCR = enableOCR;
    }

    public Boolean getIncludeLayoutInfo() {
        return includeLayoutInfo;
    }

    public void setIncludeLayoutInfo(Boolean includeLayoutInfo) {
        this.includeLayoutInfo = includeLayoutInfo;
    }

    public Boolean getLazyStartProducer() {
        return lazyStartProducer;
    }

    public void setLazyStartProducer(Boolean lazyStartProducer) {
        this.lazyStartProducer = lazyStartProducer;
    }

    public String getOcrLanguage() {
        return ocrLanguage;
    }

    public void setOcrLanguage(String ocrLanguage) {
        this.ocrLanguage = ocrLanguage;
    }

    public DoclingOperations getOperation() {
        return operation;
    }

    public void setOperation(DoclingOperations operation) {
        this.operation = operation;
    }

    public String getOutputFormat() {
        return outputFormat;
    }

    public void setOutputFormat(String outputFormat) {
        this.outputFormat = outputFormat;
    }

    public Boolean getUseDoclingServe() {
        return useDoclingServe;
    }

    public void setUseDoclingServe(Boolean useDoclingServe) {
        this.useDoclingServe = useDoclingServe;
    }

    public Long getApiTimeout() {
        return apiTimeout;
    }

    public void setApiTimeout(Long apiTimeout) {
        this.apiTimeout = apiTimeout;
    }

    public Long getAsyncPollInterval() {
        return asyncPollInterval;
    }

    public void setAsyncPollInterval(Long asyncPollInterval) {
        this.asyncPollInterval = asyncPollInterval;
    }

    public Long getAsyncTimeout() {
        return asyncTimeout;
    }

    public void setAsyncTimeout(Long asyncTimeout) {
        this.asyncTimeout = asyncTimeout;
    }

    public Boolean getAutowiredEnabled() {
        return autowiredEnabled;
    }

    public void setAutowiredEnabled(Boolean autowiredEnabled) {
        this.autowiredEnabled = autowiredEnabled;
    }

    public Integer getConnectionRequestTimeout() {
        return connectionRequestTimeout;
    }

    public void setConnectionRequestTimeout(Integer connectionRequestTimeout) {
        this.connectionRequestTimeout = connectionRequestTimeout;
    }

    public Integer getConnectionTimeout() {
        return connectionTimeout;
    }

    public void setConnectionTimeout(Integer connectionTimeout) {
        this.connectionTimeout = connectionTimeout;
    }

    public Long getConnectionTimeToLive() {
        return connectionTimeToLive;
    }

    public void setConnectionTimeToLive(Long connectionTimeToLive) {
        this.connectionTimeToLive = connectionTimeToLive;
    }

    public String getConvertEndpoint() {
        return convertEndpoint;
    }

    public void setConvertEndpoint(String convertEndpoint) {
        this.convertEndpoint = convertEndpoint;
    }

    public String getDoclingCommand() {
        return doclingCommand;
    }

    public void setDoclingCommand(String doclingCommand) {
        this.doclingCommand = doclingCommand;
    }

    public Boolean getEvictIdleConnections() {
        return evictIdleConnections;
    }

    public void setEvictIdleConnections(Boolean evictIdleConnections) {
        this.evictIdleConnections = evictIdleConnections;
    }

    public Integer getMaxConnectionsPerRoute() {
        return maxConnectionsPerRoute;
    }

    public void setMaxConnectionsPerRoute(Integer maxConnectionsPerRoute) {
        this.maxConnectionsPerRoute = maxConnectionsPerRoute;
    }

    public Long getMaxIdleTime() {
        return maxIdleTime;
    }

    public void setMaxIdleTime(Long maxIdleTime) {
        this.maxIdleTime = maxIdleTime;
    }

    public Integer getMaxTotalConnections() {
        return maxTotalConnections;
    }

    public void setMaxTotalConnections(Integer maxTotalConnections) {
        this.maxTotalConnections = maxTotalConnections;
    }

    public Long getProcessTimeout() {
        return processTimeout;
    }

    public void setProcessTimeout(Long processTimeout) {
        this.processTimeout = processTimeout;
    }

    public Integer getSocketTimeout() {
        return socketTimeout;
    }

    public void setSocketTimeout(Integer socketTimeout) {
        this.socketTimeout = socketTimeout;
    }

    public Boolean getUseAsyncMode() {
        return useAsyncMode;
    }

    public void setUseAsyncMode(Boolean useAsyncMode) {
        this.useAsyncMode = useAsyncMode;
    }

    public Integer getValidateAfterInactivity() {
        return validateAfterInactivity;
    }

    public void setValidateAfterInactivity(Integer validateAfterInactivity) {
        this.validateAfterInactivity = validateAfterInactivity;
    }

    public String getWorkingDirectory() {
        return workingDirectory;
    }

    public void setWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
    }

    public Boolean getBatchFailOnFirstError() {
        return batchFailOnFirstError;
    }

    public void setBatchFailOnFirstError(Boolean batchFailOnFirstError) {
        this.batchFailOnFirstError = batchFailOnFirstError;
    }

    public Integer getBatchParallelism() {
        return batchParallelism;
    }

    public void setBatchParallelism(Integer batchParallelism) {
        this.batchParallelism = batchParallelism;
    }

    public Integer getBatchSize() {
        return batchSize;
    }

    public void setBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
    }

    public Long getBatchTimeout() {
        return batchTimeout;
    }

    public void setBatchTimeout(Long batchTimeout) {
        this.batchTimeout = batchTimeout;
    }

    public Boolean getSplitBatchResults() {
        return splitBatchResults;
    }

    public void setSplitBatchResults(Boolean splitBatchResults) {
        this.splitBatchResults = splitBatchResults;
    }

    public String getApiKeyHeader() {
        return apiKeyHeader;
    }

    public void setApiKeyHeader(String apiKeyHeader) {
        this.apiKeyHeader = apiKeyHeader;
    }

    public AuthenticationScheme getAuthenticationScheme() {
        return authenticationScheme;
    }

    public void setAuthenticationScheme(
            AuthenticationScheme authenticationScheme) {
        this.authenticationScheme = authenticationScheme;
    }

    public String getAuthenticationToken() {
        return authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
        this.authenticationToken = authenticationToken;
    }

    public Long getMaxFileSize() {
        return maxFileSize;
    }

    public void setMaxFileSize(Long maxFileSize) {
        this.maxFileSize = maxFileSize;
    }
}