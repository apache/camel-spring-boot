{
  "groups": [
    {
      "name": "camel.component.crypto",
      "type": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.dataformat.crypto",
      "type": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.customizer",
      "type": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration",
      "sourceMethod": "getCustomizer()"
    },
    {
      "name": "camel.dataformat.pgp",
      "type": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.customizer",
      "type": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.crypto.algorithm",
      "type": "java.lang.String",
      "description": "Sets the JCE name of the Algorithm that should be used for the signer.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "defaultValue": "SHA256withRSA"
    },
    {
      "name": "camel.component.crypto.alias",
      "type": "java.lang.String",
      "description": "Sets the alias used to query the KeyStore for keys and {link java.security.cert.Certificate Certificates} to be used in signing and verifying exchanges. This value can be provided at runtime via the message header org.apache.camel.component.crypto.DigitalSignatureConstants#KEYSTORE_ALIAS",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.crypto.buffer-size",
      "type": "java.lang.Integer",
      "description": "Set the size of the buffer used to read in the Exchange payload data.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "defaultValue": 2048
    },
    {
      "name": "camel.component.crypto.certificate",
      "type": "java.security.cert.Certificate",
      "description": "Set the Certificate that should be used to verify the signature in the exchange based on its payload. The option is a java.security.cert.Certificate type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.certificate-name",
      "type": "java.lang.String",
      "description": "Sets the reference name for a PrivateKey that can be found in the registry.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.clear-headers",
      "type": "java.lang.Boolean",
      "description": "Determines if the Signature specific headers be cleared after signing and verification. Defaults to true, and should only be made otherwise at your extreme peril as vital private information such as Keys and passwords may escape if unset.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.crypto.configuration",
      "type": "org.apache.camel.component.crypto.DigitalSignatureConfiguration",
      "description": "To use the shared DigitalSignatureConfiguration as configuration. The option is a org.apache.camel.component.crypto.DigitalSignatureConfiguration type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.crypto.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the crypto component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.key-store-parameters",
      "type": "org.apache.camel.support.jsse.KeyStoreParameters",
      "description": "Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges based on the given KeyStoreParameters. A KeyStore is typically used with an alias, either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore, then this single entry will be used. The option is a org.apache.camel.support.jsse.KeyStoreParameters type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.keystore",
      "type": "java.security.KeyStore",
      "description": "Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges. A KeyStore is typically used with an alias, either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore, then this single entry will be used. The option is a java.security.KeyStore type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.keystore-name",
      "type": "java.lang.String",
      "description": "Sets the reference name for a Keystore that can be found in the registry.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.crypto.password",
      "type": "java.lang.String",
      "description": "Sets the password used to access an aliased PrivateKey in the KeyStore.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.private-key",
      "type": "java.security.PrivateKey",
      "description": "Set the PrivateKey that should be used to sign the exchange. The option is a java.security.PrivateKey type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.private-key-name",
      "type": "java.lang.String",
      "description": "Sets the reference name for a PrivateKey that can be found in the registry.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.provider",
      "type": "java.lang.String",
      "description": "Set the id of the security provider that provides the configured Signature algorithm.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.public-key",
      "type": "java.security.PublicKey",
      "description": "Set the PublicKey that should be used to verify the signature in the exchange. The option is a java.security.PublicKey type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.public-key-name",
      "type": "java.lang.String",
      "description": "references that should be resolved when the context changes",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.secure-random",
      "type": "java.security.SecureRandom",
      "description": "Set the SecureRandom used to initialize the Signature service. The option is a java.security.SecureRandom type.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.secure-random-name",
      "type": "java.lang.String",
      "description": "Sets the reference name for a SecureRandom that can be found in the registry.",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.component.crypto.signature-header-name",
      "type": "java.lang.String",
      "description": "Set the name of the message header that should be used to store the base64 encoded signature. This defaults to 'CamelDigitalSignature'",
      "sourceType": "org.apache.camel.component.crypto.springboot.DigitalSignatureComponentConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.algorithm",
      "type": "java.lang.String",
      "description": "The JCE algorithm name indicating the cryptographic algorithm that will be used.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.algorithm-parameter-ref",
      "type": "java.lang.String",
      "description": "A JCE AlgorithmParameterSpec used to initialize the Cipher. Will lookup the type using the given name as a java.security.spec.AlgorithmParameterSpec type.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.buffer-size",
      "type": "java.lang.Integer",
      "description": "The size of the buffer used in the signature process.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration",
      "defaultValue": 4096
    },
    {
      "name": "camel.dataformat.crypto.crypto-provider",
      "type": "java.lang.String",
      "description": "The name of the JCE Security Provider that should be used.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.dataformat.crypto.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the crypto data format. This is enabled by default.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.init-vector-ref",
      "type": "java.lang.String",
      "description": "Refers to a byte array containing the Initialization Vector that will be used to initialize the Cipher.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.inline",
      "type": "java.lang.Boolean",
      "description": "Flag indicating that the configured IV should be inlined into the encrypted data stream. Is by default false.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.crypto.key-ref",
      "type": "java.lang.String",
      "description": "Refers to the secret key to lookup from the register to use.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.crypto.mac-algorithm",
      "type": "java.lang.String",
      "description": "The JCE algorithm name indicating the Message Authentication algorithm.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration",
      "defaultValue": "HmacSHA1"
    },
    {
      "name": "camel.dataformat.crypto.should-append-h-m-a-c",
      "type": "java.lang.Boolean",
      "description": "Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.CryptoDataFormatConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.dataformat.pgp.algorithm",
      "type": "java.lang.Integer",
      "description": "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.armored",
      "type": "java.lang.Boolean",
      "description": "This option will cause PGP to base64 encode the encrypted text, making it available for copy\/paste, etc.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.dataformat.pgp.compression-algorithm",
      "type": "java.lang.Integer",
      "description": "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.DataFormatConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.dataformat.pgp.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the pgp data format. This is enabled by default.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.hash-algorithm",
      "type": "java.lang.Integer",
      "description": "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.integrity",
      "type": "java.lang.Boolean",
      "description": "Adds an integrity check\/sign into the encryption file. The default value is true.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.dataformat.pgp.key-file-name",
      "type": "java.lang.String",
      "description": "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.key-userid",
      "type": "java.lang.String",
      "description": "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.password",
      "type": "java.lang.String",
      "description": "Password used when opening the private key (not used for encryption).",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.provider",
      "type": "java.lang.String",
      "description": "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.signature-key-file-name",
      "type": "java.lang.String",
      "description": "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix).",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.signature-key-ring",
      "type": "java.lang.String",
      "description": "Keyring used for signing\/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.signature-key-userid",
      "type": "java.lang.String",
      "description": "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.signature-password",
      "type": "java.lang.String",
      "description": "Password used when opening the private key used for signing (during encryption).",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    },
    {
      "name": "camel.dataformat.pgp.signature-verification-option",
      "type": "java.lang.String",
      "description": "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown.",
      "sourceType": "org.apache.camel.converter.crypto.springboot.PGPDataFormatConfiguration"
    }
  ],
  "hints": []
}