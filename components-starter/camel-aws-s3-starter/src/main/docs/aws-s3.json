{
  "groups": [
    {
      "name": "camel.component.aws-s3",
      "type": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.customizer",
      "type": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "sourceMethod": "getCustomizer()"
    }
  ],
  "properties": [
    {
      "name": "camel.component.aws-s3.accelerate-mode-enabled",
      "type": "java.lang.Boolean",
      "description": "Define if Accelerate Mode enabled is true or false",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.access-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Access Key",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.amazon-s3-client",
      "type": "com.amazonaws.services.s3.AmazonS3",
      "description": "Reference to a com.amazonaws.services.s3.AmazonS3 in the registry. The option is a com.amazonaws.services.s3.AmazonS3 type.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.auto-create-bucket",
      "type": "java.lang.Boolean",
      "description": "Setting the autocreation of the bucket",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-s3.auto-discover-client",
      "type": "java.lang.Boolean",
      "description": "Setting the autoDiscoverClient mechanism, if true, the component will look for a client instance in the registry automatically otherwise it will skip that checking.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-s3.autoclose-body",
      "type": "java.lang.Boolean",
      "description": "If this option is true and includeBody is true, then the S3Object.close() method will be called on exchange completion. This option is strongly related to includeBody option. In case of setting includeBody to true and autocloseBody to false, it will be up to the caller to close the S3Object stream. Setting autocloseBody to true, will close the S3Object stream automatically.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-s3.autowired-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-s3.aws-k-m-s-key-id",
      "type": "java.lang.String",
      "description": "Define the id of KMS key to use in case KMS is enabled",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.bridge-error-handler",
      "type": "java.lang.Boolean",
      "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.chunked-encoding-disabled",
      "type": "java.lang.Boolean",
      "description": "Define if disabled Chunked Encoding is true or false",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.configuration",
      "type": "org.apache.camel.component.aws.s3.S3Configuration",
      "description": "The component configuration. The option is a org.apache.camel.component.aws.s3.S3Configuration type.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.customizer.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon$CustomizerProperties"
    },
    {
      "name": "camel.component.aws-s3.delete-after-read",
      "type": "java.lang.Boolean",
      "description": "Delete objects from S3 after they have been retrieved. The delete is only performed if the Exchange is committed. If a rollback occurs, the object is not deleted. If this option is false, then the same objects will be retrieve over and over again on the polls. Therefore you need to use the Idempotent Consumer EIP in the route to filter out duplicates. You can filter using the S3Constants#BUCKET_NAME and S3Constants#KEY headers, or only the S3Constants#KEY header.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-s3.delete-after-write",
      "type": "java.lang.Boolean",
      "description": "Delete file object after the S3 file has been uploaded",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.delimiter",
      "type": "java.lang.String",
      "description": "The delimiter which is used in the com.amazonaws.services.s3.model.ListObjectsRequest to only consume objects we are interested in.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.dualstack-enabled",
      "type": "java.lang.Boolean",
      "description": "Define if Dualstack enabled is true or false",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable auto configuration of the aws-s3 component. This is enabled by default.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.encryption-materials",
      "type": "com.amazonaws.services.s3.model.EncryptionMaterials",
      "description": "The encryption materials to use in case of Symmetric\/Asymmetric client usage. The option is a com.amazonaws.services.s3.model.EncryptionMaterials type.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.endpoint-configuration",
      "type": "com.amazonaws.client.builder.AwsClientBuilder$EndpointConfiguration",
      "description": "Amazon AWS Endpoint Configuration. The option is a com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration type.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.file-name",
      "type": "java.lang.String",
      "description": "To get the object from the bucket with the given file name",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.force-global-bucket-access-enabled",
      "type": "java.lang.Boolean",
      "description": "Define if Force Global Bucket Access enabled is true or false",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.include-body",
      "type": "java.lang.Boolean",
      "description": "If it is true, the exchange body will be set to a stream to the contents of the file. If false, the headers will be set with the S3 object metadata, but the body will be null. This option is strongly related to autocloseBody option. In case of setting includeBody to true and autocloseBody to false, it will be up to the caller to close the S3Object stream. Setting autocloseBody to true, will close the S3Object stream automatically.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": true
    },
    {
      "name": "camel.component.aws-s3.key-name",
      "type": "java.lang.String",
      "description": "Setting the key name for an element in the bucket through endpoint parameter",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.lazy-start-producer",
      "type": "java.lang.Boolean",
      "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.multi-part-upload",
      "type": "java.lang.Boolean",
      "description": "If it is true, camel will upload the file with multi part format, the part size is decided by the option of partSize",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.operation",
      "type": "org.apache.camel.component.aws.s3.S3Operations",
      "description": "The operation to do in case the user don't want to do only an upload",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.part-size",
      "type": "java.lang.Long",
      "description": "Setup the partSize which is used in multi part upload, the default size is 25M.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": 26214400
    },
    {
      "name": "camel.component.aws-s3.path-style-access",
      "type": "java.lang.Boolean",
      "description": "Whether or not the S3 client should use path style access",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.payload-signing-enabled",
      "type": "java.lang.Boolean",
      "description": "Define if Payload Signing enabled is true or false",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.policy",
      "type": "java.lang.String",
      "description": "The policy for this queue to set in the com.amazonaws.services.s3.AmazonS3#setBucketPolicy() method.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.prefix",
      "type": "java.lang.String",
      "description": "The prefix which is used in the com.amazonaws.services.s3.model.ListObjectsRequest to only consume objects we are interested in.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.proxy-host",
      "type": "java.lang.String",
      "description": "To define a proxy host when instantiating the S3 client",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.proxy-port",
      "type": "java.lang.Integer",
      "description": "Specify a proxy port to be used inside the client definition.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.proxy-protocol",
      "type": "com.amazonaws.Protocol",
      "description": "To define a proxy protocol when instantiating the S3 client",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.region",
      "type": "java.lang.String",
      "description": "The region in which S3 client needs to work. When using this parameter, the configuration will expect the capitalized name of the region (for example AP_EAST_1) You'll need to use the name Regions.EU_WEST_1.name()",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.secret-key",
      "type": "java.lang.String",
      "description": "Amazon AWS Secret Key",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.server-side-encryption",
      "type": "java.lang.String",
      "description": "Sets the server-side encryption algorithm when encrypting the object using AWS-managed keys. For example use AES256.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.storage-class",
      "type": "java.lang.String",
      "description": "The storage class to set in the com.amazonaws.services.s3.model.PutObjectRequest request.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration"
    },
    {
      "name": "camel.component.aws-s3.use-aws-k-m-s",
      "type": "java.lang.Boolean",
      "description": "Define if KMS must be used or not",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.use-encryption",
      "type": "java.lang.Boolean",
      "description": "Define if encryption must be used or not",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    },
    {
      "name": "camel.component.aws-s3.use-i-a-m-credentials",
      "type": "java.lang.Boolean",
      "description": "Set whether the S3 client should expect to load credentials on an EC2 instance or to expect static credentials to be passed in.",
      "sourceType": "org.apache.camel.component.aws.s3.springboot.S3ComponentConfiguration",
      "defaultValue": false
    }
  ],
  "hints": []
}